// Generated from src/grammars/antlr/PythonMini.g4 by ANTLR 4.9.0-SNAPSHOT


import { ATN } from "antlr4ts/atn/ATN";
import { ATNDeserializer } from "antlr4ts/atn/ATNDeserializer";
import { CharStream } from "antlr4ts/CharStream";
import { Lexer } from "antlr4ts/Lexer";
import { LexerATNSimulator } from "antlr4ts/atn/LexerATNSimulator";
import { NotNull } from "antlr4ts/Decorators";
import { Override } from "antlr4ts/Decorators";
import { RuleContext } from "antlr4ts/RuleContext";
import { Vocabulary } from "antlr4ts/Vocabulary";
import { VocabularyImpl } from "antlr4ts/VocabularyImpl";

import * as Utils from "antlr4ts/misc/Utils";


export class PythonMini extends Lexer {
	public static readonly KEYWORD = 1;
	public static readonly COMMENT = 2;
	public static readonly TRIPLE_STRING = 3;
	public static readonly STRING_DOUBLE = 4;
	public static readonly STRING_SINGLE = 5;
	public static readonly NUMBER = 6;
	public static readonly IDENTIFIER = 7;
	public static readonly PUNCT = 8;
	public static readonly WS = 9;

	// tslint:disable:no-trailing-whitespace
	public static readonly channelNames: string[] = [
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN",
	];

	// tslint:disable:no-trailing-whitespace
	public static readonly modeNames: string[] = [
		"DEFAULT_MODE",
	];

	public static readonly ruleNames: string[] = [
		"KEYWORD", "COMMENT", "TRIPLE_STRING", "STRING_DOUBLE", "STRING_SINGLE", 
		"NUMBER", "IDENTIFIER", "PUNCT", "WS", "DIGIT", "ESC",
	];

	private static readonly _LITERAL_NAMES: Array<string | undefined> = [
	];
	private static readonly _SYMBOLIC_NAMES: Array<string | undefined> = [
		undefined, "KEYWORD", "COMMENT", "TRIPLE_STRING", "STRING_DOUBLE", "STRING_SINGLE", 
		"NUMBER", "IDENTIFIER", "PUNCT", "WS",
	];
	public static readonly VOCABULARY: Vocabulary = new VocabularyImpl(PythonMini._LITERAL_NAMES, PythonMini._SYMBOLIC_NAMES, []);

	// @Override
	// @NotNull
	public get vocabulary(): Vocabulary {
		return PythonMini.VOCABULARY;
	}
	// tslint:enable:no-trailing-whitespace


	constructor(input: CharStream) {
		super(input);
		this._interp = new LexerATNSimulator(PythonMini._ATN, this);
	}

	// @Override
	public get grammarFileName(): string { return "PythonMini.g4"; }

	// @Override
	public get ruleNames(): string[] { return PythonMini.ruleNames; }

	// @Override
	public get serializedATN(): string { return PythonMini._serializedATN; }

	// @Override
	public get channelNames(): string[] { return PythonMini.channelNames; }

	// @Override
	public get modeNames(): string[] { return PythonMini.modeNames; }

	public static readonly _serializedATN: string =
		"\x03\uC91D\uCABA\u058D\uAFBA\u4F53\u0607\uEA8B\uC241\x02\v\xE7\b\x01\x04" +
		"\x02\t\x02\x04\x03\t\x03\x04\x04\t\x04\x04\x05\t\x05\x04\x06\t\x06\x04" +
		"\x07\t\x07\x04\b\t\b\x04\t\t\t\x04\n\t\n\x04\v\t\v\x04\f\t\f\x03\x02\x03" +
		"\x02\x03\x02\x03\x02\x03\x02\x03\x02\x03\x02\x03\x02\x03\x02\x03\x02\x03" +
		"\x02\x03\x02\x03\x02\x03\x02\x03\x02\x03\x02\x03\x02\x03\x02\x03\x02\x03" +
		"\x02\x03\x02\x03\x02\x03\x02\x03\x02\x03\x02\x03\x02\x03\x02\x03\x02\x03" +
		"\x02\x03\x02\x03\x02\x03\x02\x03\x02\x03\x02\x03\x02\x03\x02\x03\x02\x03" +
		"\x02\x03\x02\x03\x02\x03\x02\x03\x02\x03\x02\x03\x02\x03\x02\x03\x02\x03" +
		"\x02\x03\x02\x03\x02\x03\x02\x03\x02\x03\x02\x03\x02\x03\x02\x03\x02\x03" +
		"\x02\x03\x02\x03\x02\x03\x02\x03\x02\x03\x02\x03\x02\x03\x02\x03\x02\x03" +
		"\x02\x03\x02\x03\x02\x03\x02\x03\x02\x03\x02\x03\x02\x03\x02\x03\x02\x03" +
		"\x02\x03\x02\x03\x02\x03\x02\x03\x02\x03\x02\x03\x02\x03\x02\x03\x02\x03" +
		"\x02\x03\x02\x03\x02\x03\x02\x03\x02\x03\x02\x03\x02\x03\x02\x03\x02\x03" +
		"\x02\x03\x02\x03\x02\x03\x02\x03\x02\x03\x02\x03\x02\x03\x02\x03\x02\x03" +
		"\x02\x03\x02\x03\x02\x03\x02\x03\x02\x03\x02\x03\x02\x03\x02\x03\x02\x03" +
		"\x02\x03\x02\x03\x02\x03\x02\x03\x02\x03\x02\x03\x02\x03\x02\x05\x02\x8F" +
		"\n\x02\x03\x03\x03\x03\x07\x03\x93\n\x03\f\x03\x0E\x03\x96\v\x03\x03\x04" +
		"\x03\x04\x03\x04\x03\x04\x03\x04\x07\x04\x9D\n\x04\f\x04\x0E\x04\xA0\v" +
		"\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x07" +
		"\x04\xAA\n\x04\f\x04\x0E\x04\xAD\v\x04\x03\x04\x03\x04\x03\x04\x05\x04" +
		"\xB2\n\x04\x03\x05\x03\x05\x03\x05\x07\x05\xB7\n\x05\f\x05\x0E\x05\xBA" +
		"\v\x05\x03\x05\x03\x05\x03\x06\x03\x06\x03\x06\x07\x06\xC1\n\x06\f\x06" +
		"\x0E\x06\xC4\v\x06\x03\x06\x03\x06\x03\x07\x06\x07\xC9\n\x07\r\x07\x0E" +
		"\x07\xCA\x03\x07\x03\x07\x06\x07\xCF\n\x07\r\x07\x0E\x07\xD0\x05\x07\xD3" +
		"\n\x07\x03\b\x03\b\x07\b\xD7\n\b\f\b\x0E\b\xDA\v\b\x03\t\x03\t\x03\n\x06" +
		"\n\xDF\n\n\r\n\x0E\n\xE0\x03\v\x03\v\x03\f\x03\f\x03\f\x04\x9E\xAB\x02" +
		"\x02\r\x03\x02\x03\x05\x02\x04\x07\x02\x05\t\x02\x06\v\x02\x07\r\x02\b" +
		"\x0F\x02\t\x11\x02\n\x13\x02\v\x15\x02\x02\x17\x02\x02\x03\x02\n\x04\x02" +
		"\f\f\x0F\x0F\x06\x02\f\f\x0F\x0F$$^^\x06\x02\f\f\x0F\x0F))^^\x05\x02C" +
		"\\aac|\x06\x022;C\\aac|\t\x02##\'(*1<A]]_`}\x7F\x05\x02\v\f\x0F\x0F\"" +
		"\"\x03\x022;\x02\u010C\x02\x03\x03\x02\x02\x02\x02\x05\x03\x02\x02\x02" +
		"\x02\x07\x03\x02\x02\x02\x02\t\x03\x02\x02\x02\x02\v\x03\x02\x02\x02\x02" +
		"\r\x03\x02\x02\x02\x02\x0F\x03\x02\x02\x02\x02\x11\x03\x02\x02\x02\x02" +
		"\x13\x03\x02\x02\x02\x03\x8E\x03\x02\x02\x02\x05\x90\x03\x02\x02\x02\x07" +
		"\xB1\x03\x02\x02\x02\t\xB3\x03\x02\x02\x02\v\xBD\x03\x02\x02\x02\r\xC8" +
		"\x03\x02\x02\x02\x0F\xD4\x03\x02\x02\x02\x11\xDB\x03\x02\x02\x02\x13\xDE" +
		"\x03\x02\x02\x02\x15\xE2\x03\x02\x02\x02\x17\xE4\x03\x02\x02\x02\x19\x1A" +
		"\x07f\x02\x02\x1A\x1B\x07g\x02\x02\x1B\x8F\x07h\x02\x02\x1C\x1D\x07t\x02" +
		"\x02\x1D\x1E\x07g\x02\x02\x1E\x1F\x07v\x02\x02\x1F \x07w\x02\x02 !\x07" +
		"t\x02\x02!\x8F\x07p\x02\x02\"#\x07k\x02\x02#\x8F\x07h\x02\x02$%\x07g\x02" +
		"\x02%&\x07n\x02\x02&\'\x07k\x02\x02\'\x8F\x07h\x02\x02()\x07g\x02\x02" +
		")*\x07n\x02\x02*+\x07u\x02\x02+\x8F\x07g\x02\x02,-\x07h\x02\x02-.\x07" +
		"q\x02\x02.\x8F\x07t\x02\x02/0\x07y\x02\x0201\x07j\x02\x0212\x07k\x02\x02" +
		"23\x07n\x02\x023\x8F\x07g\x02\x0245\x07k\x02\x0256\x07o\x02\x0267\x07" +
		"r\x02\x0278\x07q\x02\x0289\x07t\x02\x029\x8F\x07v\x02\x02:;\x07h\x02\x02" +
		";<\x07t\x02\x02<=\x07q\x02\x02=\x8F\x07o\x02\x02>?\x07c\x02\x02?\x8F\x07" +
		"u\x02\x02@A\x07e\x02\x02AB\x07n\x02\x02BC\x07c\x02\x02CD\x07u\x02\x02" +
		"D\x8F\x07u\x02\x02EF\x07v\x02\x02FG\x07t\x02\x02G\x8F\x07{\x02\x02HI\x07" +
		"g\x02\x02IJ\x07z\x02\x02JK\x07e\x02\x02KL\x07g\x02\x02LM\x07r\x02\x02" +
		"M\x8F\x07v\x02\x02NO\x07h\x02\x02OP\x07k\x02\x02PQ\x07p\x02\x02QR\x07" +
		"c\x02\x02RS\x07n\x02\x02ST\x07n\x02\x02T\x8F\x07{\x02\x02UV\x07y\x02\x02" +
		"VW\x07k\x02\x02WX\x07v\x02\x02X\x8F\x07j\x02\x02YZ\x07{\x02\x02Z[\x07" +
		"k\x02\x02[\\\x07g\x02\x02\\]\x07n\x02\x02]\x8F\x07f\x02\x02^_\x07n\x02" +
		"\x02_`\x07c\x02\x02`a\x07o\x02\x02ab\x07d\x02\x02bc\x07f\x02\x02c\x8F" +
		"\x07c\x02\x02de\x07r\x02\x02ef\x07c\x02\x02fg\x07u\x02\x02g\x8F\x07u\x02" +
		"\x02hi\x07d\x02\x02ij\x07t\x02\x02jk\x07g\x02\x02kl\x07c\x02\x02l\x8F" +
		"\x07m\x02\x02mn\x07e\x02\x02no\x07q\x02\x02op\x07p\x02\x02pq\x07v\x02" +
		"\x02qr\x07k\x02\x02rs\x07p\x02\x02st\x07w\x02\x02t\x8F\x07g\x02\x02uv" +
		"\x07c\x02\x02vw\x07p\x02\x02w\x8F\x07f\x02\x02xy\x07q\x02\x02y\x8F\x07" +
		"t\x02\x02z{\x07p\x02\x02{|\x07q\x02\x02|\x8F\x07v\x02\x02}~\x07k\x02\x02" +
		"~\x8F\x07p\x02\x02\x7F\x80\x07k\x02\x02\x80\x8F\x07u\x02\x02\x81\x82\x07" +
		"P\x02\x02\x82\x83\x07q\x02\x02\x83\x84\x07p\x02\x02\x84\x8F\x07g\x02\x02" +
		"\x85\x86\x07V\x02\x02\x86\x87\x07t\x02\x02\x87\x88\x07w\x02\x02\x88\x8F" +
		"\x07g\x02\x02\x89\x8A\x07H\x02\x02\x8A\x8B\x07c\x02\x02\x8B\x8C\x07n\x02" +
		"\x02\x8C\x8D\x07u\x02\x02\x8D\x8F\x07g\x02\x02\x8E\x19\x03\x02\x02\x02" +
		"\x8E\x1C\x03\x02\x02\x02\x8E\"\x03\x02\x02\x02\x8E$\x03\x02\x02\x02\x8E" +
		"(\x03\x02\x02\x02\x8E,\x03\x02\x02\x02\x8E/\x03\x02\x02\x02\x8E4\x03\x02" +
		"\x02\x02\x8E:\x03\x02\x02\x02\x8E>\x03\x02\x02\x02\x8E@\x03\x02\x02\x02" +
		"\x8EE\x03\x02\x02\x02\x8EH\x03\x02\x02\x02\x8EN\x03\x02\x02\x02\x8EU\x03" +
		"\x02\x02\x02\x8EY\x03\x02\x02\x02\x8E^\x03\x02\x02\x02\x8Ed\x03\x02\x02" +
		"\x02\x8Eh\x03\x02\x02\x02\x8Em\x03\x02\x02\x02\x8Eu\x03\x02\x02\x02\x8E" +
		"x\x03\x02\x02\x02\x8Ez\x03\x02\x02\x02\x8E}\x03\x02\x02\x02\x8E\x7F\x03" +
		"\x02\x02\x02\x8E\x81\x03\x02\x02\x02\x8E\x85\x03\x02\x02\x02\x8E\x89\x03" +
		"\x02\x02\x02\x8F\x04\x03\x02\x02\x02\x90\x94\x07%\x02\x02\x91\x93\n\x02" +
		"\x02\x02\x92\x91\x03\x02\x02\x02\x93\x96\x03\x02\x02\x02\x94\x92\x03\x02" +
		"\x02\x02\x94\x95\x03\x02\x02\x02\x95\x06\x03\x02\x02\x02\x96\x94\x03\x02" +
		"\x02\x02\x97\x98\x07$\x02\x02\x98\x99\x07$\x02\x02\x99\x9A\x07$\x02\x02" +
		"\x9A\x9E\x03\x02\x02\x02\x9B\x9D\v\x02\x02\x02\x9C\x9B\x03\x02\x02\x02" +
		"\x9D\xA0\x03\x02\x02\x02\x9E\x9F\x03\x02\x02\x02\x9E\x9C\x03\x02\x02\x02" +
		"\x9F\xA1\x03\x02\x02\x02\xA0\x9E\x03\x02\x02\x02\xA1\xA2\x07$\x02\x02" +
		"\xA2\xA3\x07$\x02\x02\xA3\xB2\x07$\x02\x02\xA4\xA5\x07)\x02\x02\xA5\xA6" +
		"\x07)\x02\x02\xA6\xA7\x07)\x02\x02\xA7\xAB\x03\x02\x02\x02\xA8\xAA\v\x02" +
		"\x02\x02\xA9\xA8\x03\x02\x02\x02\xAA\xAD\x03\x02\x02\x02\xAB\xAC\x03\x02" +
		"\x02\x02\xAB\xA9\x03\x02\x02\x02\xAC\xAE\x03\x02\x02\x02\xAD\xAB\x03\x02" +
		"\x02\x02\xAE\xAF\x07)\x02\x02\xAF\xB0\x07)\x02\x02\xB0\xB2\x07)\x02\x02" +
		"\xB1\x97\x03\x02\x02\x02\xB1\xA4\x03\x02\x02\x02\xB2\b\x03\x02\x02\x02" +
		"\xB3\xB8\x07$\x02\x02\xB4\xB7\x05\x17\f\x02\xB5\xB7\n\x03\x02\x02\xB6" +
		"\xB4\x03\x02\x02\x02\xB6\xB5\x03\x02\x02\x02\xB7\xBA\x03\x02\x02\x02\xB8" +
		"\xB6\x03\x02\x02\x02\xB8\xB9\x03\x02\x02\x02\xB9\xBB\x03\x02\x02\x02\xBA" +
		"\xB8\x03\x02\x02\x02\xBB\xBC\x07$\x02\x02\xBC\n\x03\x02\x02\x02\xBD\xC2" +
		"\x07)\x02\x02\xBE\xC1\x05\x17\f\x02\xBF\xC1\n\x04\x02\x02\xC0\xBE\x03" +
		"\x02\x02\x02\xC0\xBF\x03\x02\x02\x02\xC1\xC4\x03\x02\x02\x02\xC2\xC0\x03" +
		"\x02\x02\x02\xC2\xC3\x03\x02\x02\x02\xC3\xC5\x03\x02\x02\x02\xC4\xC2\x03" +
		"\x02\x02\x02\xC5\xC6\x07)\x02\x02\xC6\f\x03\x02\x02\x02\xC7\xC9\x05\x15" +
		"\v\x02\xC8\xC7\x03\x02\x02\x02\xC9\xCA\x03\x02\x02\x02\xCA\xC8\x03\x02" +
		"\x02\x02\xCA\xCB\x03\x02\x02\x02\xCB\xD2\x03\x02\x02\x02\xCC\xCE\x070" +
		"\x02\x02\xCD\xCF\x05\x15\v\x02\xCE\xCD\x03\x02\x02\x02\xCF\xD0\x03\x02" +
		"\x02\x02\xD0\xCE\x03\x02\x02\x02\xD0\xD1\x03\x02\x02\x02\xD1\xD3\x03\x02" +
		"\x02\x02\xD2\xCC\x03\x02\x02\x02\xD2\xD3\x03\x02\x02\x02\xD3\x0E\x03\x02" +
		"\x02\x02\xD4\xD8\t\x05\x02\x02\xD5\xD7\t\x06\x02\x02\xD6\xD5\x03\x02\x02" +
		"\x02\xD7\xDA\x03\x02\x02\x02\xD8\xD6\x03\x02\x02\x02\xD8\xD9\x03\x02\x02" +
		"\x02\xD9\x10\x03\x02\x02\x02\xDA\xD8\x03\x02\x02\x02\xDB\xDC\t\x07\x02" +
		"\x02\xDC\x12\x03\x02\x02\x02\xDD\xDF\t\b\x02\x02\xDE\xDD\x03\x02\x02\x02" +
		"\xDF\xE0\x03\x02\x02\x02\xE0\xDE\x03\x02\x02\x02\xE0\xE1\x03\x02\x02\x02" +
		"\xE1\x14\x03\x02\x02\x02\xE2\xE3\t\t\x02\x02\xE3\x16\x03\x02\x02\x02\xE4" +
		"\xE5\x07^\x02\x02\xE5\xE6\v\x02\x02\x02\xE6\x18\x03\x02\x02\x02\x11\x02" +
		"\x8E\x94\x9E\xAB\xB1\xB6\xB8\xC0\xC2\xCA\xD0\xD2\xD8\xE0\x02";
	public static __ATN: ATN;
	public static get _ATN(): ATN {
		if (!PythonMini.__ATN) {
			PythonMini.__ATN = new ATNDeserializer().deserialize(Utils.toCharArray(PythonMini._serializedATN));
		}

		return PythonMini.__ATN;
	}

}

