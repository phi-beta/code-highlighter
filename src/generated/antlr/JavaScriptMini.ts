// Generated from E:/GitHub/code-highlighter/src/grammars/antlr/JavaScriptMini.g4 by ANTLR 4.13.1
// noinspection ES6UnusedImports,JSUnusedGlobalSymbols,JSUnusedLocalSymbols
import {
	ATN,
	ATNDeserializer,
	CharStream,
	DecisionState, DFA,
	Lexer,
	LexerATNSimulator,
	RuleContext,
	PredictionContextCache,
	Token
} from "antlr4";
export default class JavaScriptMini extends Lexer {
	public static readonly KEYWORD = 1;
	public static readonly COMMENT_LINE = 2;
	public static readonly COMMENT_BLOCK = 3;
	public static readonly STRING_DOUBLE = 4;
	public static readonly STRING_SINGLE = 5;
	public static readonly TEMPLATE = 6;
	public static readonly NUMBER = 7;
	public static readonly IDENTIFIER = 8;
	public static readonly PUNCT = 9;
	public static readonly WS = 10;
	public static readonly EOF = Token.EOF;

	public static readonly channelNames: string[] = [ "DEFAULT_TOKEN_CHANNEL", "HIDDEN" ];
	public static readonly literalNames: (string | null)[] = [  ];
	public static readonly symbolicNames: (string | null)[] = [ null, "KEYWORD", 
                                                             "COMMENT_LINE", 
                                                             "COMMENT_BLOCK", 
                                                             "STRING_DOUBLE", 
                                                             "STRING_SINGLE", 
                                                             "TEMPLATE", 
                                                             "NUMBER", "IDENTIFIER", 
                                                             "PUNCT", "WS" ];
	public static readonly modeNames: string[] = [ "DEFAULT_MODE", ];

	public static readonly ruleNames: string[] = [
		"KEYWORD", "COMMENT_LINE", "COMMENT_BLOCK", "STRING_DOUBLE", "STRING_SINGLE", 
		"TEMPLATE", "NUMBER", "IDENTIFIER", "PUNCT", "WS", "DIGIT", "ESC",
	];


	constructor(input: CharStream) {
		super(input);
		this._interp = new LexerATNSimulator(this, JavaScriptMini._ATN, JavaScriptMini.DecisionsToDFA, new PredictionContextCache());
	}

	public get grammarFileName(): string { return "JavaScriptMini.g4"; }

	public get literalNames(): (string | null)[] { return JavaScriptMini.literalNames; }
	public get symbolicNames(): (string | null)[] { return JavaScriptMini.symbolicNames; }
	public get ruleNames(): string[] { return JavaScriptMini.ruleNames; }

	public get serializedATN(): number[] { return JavaScriptMini._serializedATN; }

	public get channelNames(): string[] { return JavaScriptMini.channelNames; }

	public get modeNames(): string[] { return JavaScriptMini.modeNames; }

	public static readonly _serializedATN: number[] = [4,0,10,345,6,-1,2,0,
	7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,7,7,2,8,7,8,2,9,
	7,9,2,10,7,10,2,11,7,11,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,
	1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,
	1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,
	1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,
	1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,
	1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,
	1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,
	1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,
	1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,
	1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,
	1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,
	1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,
	1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,
	1,0,1,0,1,0,1,0,1,0,1,0,1,0,3,0,261,8,0,1,1,1,1,1,1,1,1,5,1,267,8,1,10,
	1,12,1,270,9,1,1,2,1,2,1,2,1,2,5,2,276,8,2,10,2,12,2,279,9,2,1,2,1,2,1,
	2,1,3,1,3,1,3,5,3,287,8,3,10,3,12,3,290,9,3,1,3,1,3,1,4,1,4,1,4,5,4,297,
	8,4,10,4,12,4,300,9,4,1,4,1,4,1,5,1,5,1,5,5,5,307,8,5,10,5,12,5,310,9,5,
	1,5,1,5,1,6,4,6,315,8,6,11,6,12,6,316,1,6,1,6,4,6,321,8,6,11,6,12,6,322,
	3,6,325,8,6,1,7,1,7,5,7,329,8,7,10,7,12,7,332,9,7,1,8,1,8,1,9,4,9,337,8,
	9,11,9,12,9,338,1,10,1,10,1,11,1,11,1,11,1,277,0,12,1,1,3,2,5,3,7,4,9,5,
	11,6,13,7,15,8,17,9,19,10,21,0,23,0,1,0,9,2,0,10,10,13,13,4,0,10,10,13,
	13,34,34,92,92,4,0,10,10,13,13,39,39,92,92,2,0,92,92,96,96,4,0,36,36,65,
	90,95,95,97,122,5,0,36,36,48,57,65,90,95,95,97,122,7,0,33,33,37,38,40,47,
	58,63,91,91,93,94,123,125,3,0,9,10,13,13,32,32,1,0,48,57,397,0,1,1,0,0,
	0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,
	0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,1,260,1,0,0,0,3,262,1,0,0,0,
	5,271,1,0,0,0,7,283,1,0,0,0,9,293,1,0,0,0,11,303,1,0,0,0,13,314,1,0,0,0,
	15,326,1,0,0,0,17,333,1,0,0,0,19,336,1,0,0,0,21,340,1,0,0,0,23,342,1,0,
	0,0,25,26,5,98,0,0,26,27,5,114,0,0,27,28,5,101,0,0,28,29,5,97,0,0,29,261,
	5,107,0,0,30,31,5,99,0,0,31,32,5,97,0,0,32,33,5,115,0,0,33,261,5,101,0,
	0,34,35,5,99,0,0,35,36,5,97,0,0,36,37,5,116,0,0,37,38,5,99,0,0,38,261,5,
	104,0,0,39,40,5,99,0,0,40,41,5,108,0,0,41,42,5,97,0,0,42,43,5,115,0,0,43,
	261,5,115,0,0,44,45,5,99,0,0,45,46,5,111,0,0,46,47,5,110,0,0,47,48,5,115,
	0,0,48,261,5,116,0,0,49,50,5,99,0,0,50,51,5,111,0,0,51,52,5,110,0,0,52,
	53,5,116,0,0,53,54,5,105,0,0,54,55,5,110,0,0,55,56,5,117,0,0,56,261,5,101,
	0,0,57,58,5,100,0,0,58,59,5,101,0,0,59,60,5,98,0,0,60,61,5,117,0,0,61,62,
	5,103,0,0,62,63,5,103,0,0,63,64,5,101,0,0,64,261,5,114,0,0,65,66,5,100,
	0,0,66,67,5,101,0,0,67,68,5,102,0,0,68,69,5,97,0,0,69,70,5,117,0,0,70,71,
	5,108,0,0,71,261,5,116,0,0,72,73,5,100,0,0,73,74,5,101,0,0,74,75,5,108,
	0,0,75,76,5,101,0,0,76,77,5,116,0,0,77,261,5,101,0,0,78,79,5,100,0,0,79,
	261,5,111,0,0,80,81,5,101,0,0,81,82,5,108,0,0,82,83,5,115,0,0,83,261,5,
	101,0,0,84,85,5,101,0,0,85,86,5,120,0,0,86,87,5,112,0,0,87,88,5,111,0,0,
	88,89,5,114,0,0,89,261,5,116,0,0,90,91,5,101,0,0,91,92,5,120,0,0,92,93,
	5,116,0,0,93,94,5,101,0,0,94,95,5,110,0,0,95,96,5,100,0,0,96,261,5,115,
	0,0,97,98,5,102,0,0,98,99,5,105,0,0,99,100,5,110,0,0,100,101,5,97,0,0,101,
	102,5,108,0,0,102,103,5,108,0,0,103,261,5,121,0,0,104,105,5,102,0,0,105,
	106,5,111,0,0,106,261,5,114,0,0,107,108,5,102,0,0,108,109,5,117,0,0,109,
	110,5,110,0,0,110,111,5,99,0,0,111,112,5,116,0,0,112,113,5,105,0,0,113,
	114,5,111,0,0,114,261,5,110,0,0,115,116,5,105,0,0,116,261,5,102,0,0,117,
	118,5,105,0,0,118,119,5,109,0,0,119,120,5,112,0,0,120,121,5,111,0,0,121,
	122,5,114,0,0,122,261,5,116,0,0,123,124,5,105,0,0,124,261,5,110,0,0,125,
	126,5,105,0,0,126,127,5,110,0,0,127,128,5,115,0,0,128,129,5,116,0,0,129,
	130,5,97,0,0,130,131,5,110,0,0,131,132,5,99,0,0,132,133,5,101,0,0,133,134,
	5,111,0,0,134,261,5,102,0,0,135,136,5,108,0,0,136,137,5,101,0,0,137,261,
	5,116,0,0,138,139,5,110,0,0,139,140,5,101,0,0,140,261,5,119,0,0,141,142,
	5,114,0,0,142,143,5,101,0,0,143,144,5,116,0,0,144,145,5,117,0,0,145,146,
	5,114,0,0,146,261,5,110,0,0,147,148,5,115,0,0,148,149,5,117,0,0,149,150,
	5,112,0,0,150,151,5,101,0,0,151,261,5,114,0,0,152,153,5,115,0,0,153,154,
	5,119,0,0,154,155,5,105,0,0,155,156,5,116,0,0,156,157,5,99,0,0,157,261,
	5,104,0,0,158,159,5,116,0,0,159,160,5,104,0,0,160,161,5,105,0,0,161,261,
	5,115,0,0,162,163,5,116,0,0,163,164,5,104,0,0,164,165,5,114,0,0,165,166,
	5,111,0,0,166,261,5,119,0,0,167,168,5,116,0,0,168,169,5,114,0,0,169,261,
	5,121,0,0,170,171,5,116,0,0,171,172,5,121,0,0,172,173,5,112,0,0,173,174,
	5,101,0,0,174,175,5,111,0,0,175,261,5,102,0,0,176,177,5,118,0,0,177,178,
	5,97,0,0,178,261,5,114,0,0,179,180,5,118,0,0,180,181,5,111,0,0,181,182,
	5,105,0,0,182,261,5,100,0,0,183,184,5,119,0,0,184,185,5,104,0,0,185,186,
	5,105,0,0,186,187,5,108,0,0,187,261,5,101,0,0,188,189,5,119,0,0,189,190,
	5,105,0,0,190,191,5,116,0,0,191,261,5,104,0,0,192,193,5,121,0,0,193,194,
	5,105,0,0,194,195,5,101,0,0,195,196,5,108,0,0,196,261,5,100,0,0,197,198,
	5,101,0,0,198,199,5,110,0,0,199,200,5,117,0,0,200,261,5,109,0,0,201,202,
	5,97,0,0,202,203,5,119,0,0,203,204,5,97,0,0,204,205,5,105,0,0,205,261,5,
	116,0,0,206,207,5,105,0,0,207,208,5,109,0,0,208,209,5,112,0,0,209,210,5,
	108,0,0,210,211,5,101,0,0,211,212,5,109,0,0,212,213,5,101,0,0,213,214,5,
	110,0,0,214,215,5,116,0,0,215,261,5,115,0,0,216,217,5,112,0,0,217,218,5,
	97,0,0,218,219,5,99,0,0,219,220,5,107,0,0,220,221,5,97,0,0,221,222,5,103,
	0,0,222,261,5,101,0,0,223,224,5,112,0,0,224,225,5,114,0,0,225,226,5,111,
	0,0,226,227,5,116,0,0,227,228,5,101,0,0,228,229,5,99,0,0,229,230,5,116,
	0,0,230,231,5,101,0,0,231,261,5,100,0,0,232,233,5,115,0,0,233,234,5,116,
	0,0,234,235,5,97,0,0,235,236,5,116,0,0,236,237,5,105,0,0,237,261,5,99,0,
	0,238,239,5,105,0,0,239,240,5,110,0,0,240,241,5,116,0,0,241,242,5,101,0,
	0,242,243,5,114,0,0,243,244,5,102,0,0,244,245,5,97,0,0,245,246,5,99,0,0,
	246,261,5,101,0,0,247,248,5,112,0,0,248,249,5,114,0,0,249,250,5,105,0,0,
	250,251,5,118,0,0,251,252,5,97,0,0,252,253,5,116,0,0,253,261,5,101,0,0,
	254,255,5,112,0,0,255,256,5,117,0,0,256,257,5,98,0,0,257,258,5,108,0,0,
	258,259,5,105,0,0,259,261,5,99,0,0,260,25,1,0,0,0,260,30,1,0,0,0,260,34,
	1,0,0,0,260,39,1,0,0,0,260,44,1,0,0,0,260,49,1,0,0,0,260,57,1,0,0,0,260,
	65,1,0,0,0,260,72,1,0,0,0,260,78,1,0,0,0,260,80,1,0,0,0,260,84,1,0,0,0,
	260,90,1,0,0,0,260,97,1,0,0,0,260,104,1,0,0,0,260,107,1,0,0,0,260,115,1,
	0,0,0,260,117,1,0,0,0,260,123,1,0,0,0,260,125,1,0,0,0,260,135,1,0,0,0,260,
	138,1,0,0,0,260,141,1,0,0,0,260,147,1,0,0,0,260,152,1,0,0,0,260,158,1,0,
	0,0,260,162,1,0,0,0,260,167,1,0,0,0,260,170,1,0,0,0,260,176,1,0,0,0,260,
	179,1,0,0,0,260,183,1,0,0,0,260,188,1,0,0,0,260,192,1,0,0,0,260,197,1,0,
	0,0,260,201,1,0,0,0,260,206,1,0,0,0,260,216,1,0,0,0,260,223,1,0,0,0,260,
	232,1,0,0,0,260,238,1,0,0,0,260,247,1,0,0,0,260,254,1,0,0,0,261,2,1,0,0,
	0,262,263,5,47,0,0,263,264,5,47,0,0,264,268,1,0,0,0,265,267,8,0,0,0,266,
	265,1,0,0,0,267,270,1,0,0,0,268,266,1,0,0,0,268,269,1,0,0,0,269,4,1,0,0,
	0,270,268,1,0,0,0,271,272,5,47,0,0,272,273,5,42,0,0,273,277,1,0,0,0,274,
	276,9,0,0,0,275,274,1,0,0,0,276,279,1,0,0,0,277,278,1,0,0,0,277,275,1,0,
	0,0,278,280,1,0,0,0,279,277,1,0,0,0,280,281,5,42,0,0,281,282,5,47,0,0,282,
	6,1,0,0,0,283,288,5,34,0,0,284,287,3,23,11,0,285,287,8,1,0,0,286,284,1,
	0,0,0,286,285,1,0,0,0,287,290,1,0,0,0,288,286,1,0,0,0,288,289,1,0,0,0,289,
	291,1,0,0,0,290,288,1,0,0,0,291,292,5,34,0,0,292,8,1,0,0,0,293,298,5,39,
	0,0,294,297,3,23,11,0,295,297,8,2,0,0,296,294,1,0,0,0,296,295,1,0,0,0,297,
	300,1,0,0,0,298,296,1,0,0,0,298,299,1,0,0,0,299,301,1,0,0,0,300,298,1,0,
	0,0,301,302,5,39,0,0,302,10,1,0,0,0,303,308,5,96,0,0,304,307,3,23,11,0,
	305,307,8,3,0,0,306,304,1,0,0,0,306,305,1,0,0,0,307,310,1,0,0,0,308,306,
	1,0,0,0,308,309,1,0,0,0,309,311,1,0,0,0,310,308,1,0,0,0,311,312,5,96,0,
	0,312,12,1,0,0,0,313,315,3,21,10,0,314,313,1,0,0,0,315,316,1,0,0,0,316,
	314,1,0,0,0,316,317,1,0,0,0,317,324,1,0,0,0,318,320,5,46,0,0,319,321,3,
	21,10,0,320,319,1,0,0,0,321,322,1,0,0,0,322,320,1,0,0,0,322,323,1,0,0,0,
	323,325,1,0,0,0,324,318,1,0,0,0,324,325,1,0,0,0,325,14,1,0,0,0,326,330,
	7,4,0,0,327,329,7,5,0,0,328,327,1,0,0,0,329,332,1,0,0,0,330,328,1,0,0,0,
	330,331,1,0,0,0,331,16,1,0,0,0,332,330,1,0,0,0,333,334,7,6,0,0,334,18,1,
	0,0,0,335,337,7,7,0,0,336,335,1,0,0,0,337,338,1,0,0,0,338,336,1,0,0,0,338,
	339,1,0,0,0,339,20,1,0,0,0,340,341,7,8,0,0,341,22,1,0,0,0,342,343,5,92,
	0,0,343,344,9,0,0,0,344,24,1,0,0,0,15,0,260,268,277,286,288,296,298,306,
	308,316,322,324,330,338,0];

	private static __ATN: ATN;
	public static get _ATN(): ATN {
		if (!JavaScriptMini.__ATN) {
			JavaScriptMini.__ATN = new ATNDeserializer().deserialize(JavaScriptMini._serializedATN);
		}

		return JavaScriptMini.__ATN;
	}


	static DecisionsToDFA = JavaScriptMini._ATN.decisionToState.map( (ds: DecisionState, index: number) => new DFA(ds, index) );
}