// Generated from src\grammars\antlr\JsonMini.g4 by ANTLR 4.9.0-SNAPSHOT


import { ATN } from "antlr4ts/atn/ATN";
import { ATNDeserializer } from "antlr4ts/atn/ATNDeserializer";
import { CharStream } from "antlr4ts/CharStream";
import { Lexer } from "antlr4ts/Lexer";
import { LexerATNSimulator } from "antlr4ts/atn/LexerATNSimulator";
import { NotNull } from "antlr4ts/Decorators";
import { Override } from "antlr4ts/Decorators";
import { RuleContext } from "antlr4ts/RuleContext";
import { Vocabulary } from "antlr4ts/Vocabulary";
import { VocabularyImpl } from "antlr4ts/VocabularyImpl";

import * as Utils from "antlr4ts/misc/Utils";


export class JsonMini extends Lexer {
	public static readonly LCURLY = 1;
	public static readonly RCURLY = 2;
	public static readonly LBRACK = 3;
	public static readonly RBRACK = 4;
	public static readonly COLON = 5;
	public static readonly COMMA = 6;
	public static readonly TRUE = 7;
	public static readonly FALSE = 8;
	public static readonly NULL = 9;
	public static readonly NUMBER = 10;
	public static readonly STRING = 11;
	public static readonly WS = 12;

	// tslint:disable:no-trailing-whitespace
	public static readonly channelNames: string[] = [
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN",
	];

	// tslint:disable:no-trailing-whitespace
	public static readonly modeNames: string[] = [
		"DEFAULT_MODE",
	];

	public static readonly ruleNames: string[] = [
		"LCURLY", "RCURLY", "LBRACK", "RBRACK", "COLON", "COMMA", "TRUE", "FALSE", 
		"NULL", "NUMBER", "STRING", "WS", "DIGIT", "ESC", "HEX",
	];

	private static readonly _LITERAL_NAMES: Array<string | undefined> = [
		undefined, "'{'", "'}'", "'['", "']'", "':'", "','", "'true'", "'false'", 
		"'null'",
	];
	private static readonly _SYMBOLIC_NAMES: Array<string | undefined> = [
		undefined, "LCURLY", "RCURLY", "LBRACK", "RBRACK", "COLON", "COMMA", "TRUE", 
		"FALSE", "NULL", "NUMBER", "STRING", "WS",
	];
	public static readonly VOCABULARY: Vocabulary = new VocabularyImpl(JsonMini._LITERAL_NAMES, JsonMini._SYMBOLIC_NAMES, []);

	// @Override
	// @NotNull
	public get vocabulary(): Vocabulary {
		return JsonMini.VOCABULARY;
	}
	// tslint:enable:no-trailing-whitespace


	constructor(input: CharStream) {
		super(input);
		this._interp = new LexerATNSimulator(JsonMini._ATN, this);
	}

	// @Override
	public get grammarFileName(): string { return "JsonMini.g4"; }

	// @Override
	public get ruleNames(): string[] { return JsonMini.ruleNames; }

	// @Override
	public get serializedATN(): string { return JsonMini._serializedATN; }

	// @Override
	public get channelNames(): string[] { return JsonMini.channelNames; }

	// @Override
	public get modeNames(): string[] { return JsonMini.modeNames; }

	public static readonly _serializedATN: string =
		"\x03\uC91D\uCABA\u058D\uAFBA\u4F53\u0607\uEA8B\uC241\x02\x0Ev\b\x01\x04" +
		"\x02\t\x02\x04\x03\t\x03\x04\x04\t\x04\x04\x05\t\x05\x04\x06\t\x06\x04" +
		"\x07\t\x07\x04\b\t\b\x04\t\t\t\x04\n\t\n\x04\v\t\v\x04\f\t\f\x04\r\t\r" +
		"\x04\x0E\t\x0E\x04\x0F\t\x0F\x04\x10\t\x10\x03\x02\x03\x02\x03\x03\x03" +
		"\x03\x03\x04\x03\x04\x03\x05\x03\x05\x03\x06\x03\x06\x03\x07\x03\x07\x03" +
		"\b\x03\b\x03\b\x03\b\x03\b\x03\t\x03\t\x03\t\x03\t\x03\t\x03\t\x03\n\x03" +
		"\n\x03\n\x03\n\x03\n\x03\v\x05\v?\n\v\x03\v\x06\vB\n\v\r\v\x0E\vC\x03" +
		"\v\x03\v\x06\vH\n\v\r\v\x0E\vI\x05\vL\n\v\x03\v\x03\v\x05\vP\n\v\x03\v" +
		"\x06\vS\n\v\r\v\x0E\vT\x05\vW\n\v\x03\f\x03\f\x03\f\x07\f\\\n\f\f\f\x0E" +
		"\f_\v\f\x03\f\x03\f\x03\r\x06\rd\n\r\r\r\x0E\re\x03\x0E\x03\x0E\x03\x0F" +
		"\x03\x0F\x03\x0F\x03\x0F\x03\x0F\x03\x0F\x03\x0F\x03\x0F\x03\x0F\x05\x0F" +
		"s\n\x0F\x03\x10\x03\x10\x02\x02\x02\x11\x03\x02\x03\x05\x02\x04\x07\x02" +
		"\x05\t\x02\x06\v\x02\x07\r\x02\b\x0F\x02\t\x11\x02\n\x13\x02\v\x15\x02" +
		"\f\x17\x02\r\x19\x02\x0E\x1B\x02\x02\x1D\x02\x02\x1F\x02\x02\x03\x02\t" +
		"\x04\x02GGgg\x04\x02--//\x06\x02\f\f\x0F\x0F$$^^\x05\x02\v\f\x0F\x0F\"" +
		"\"\x03\x022;\n\x02$$11^^ddhhppttvv\x05\x022;CHch\x02}\x02\x03\x03\x02" +
		"\x02\x02\x02\x05\x03\x02\x02\x02\x02\x07\x03\x02\x02\x02\x02\t\x03\x02" +
		"\x02\x02\x02\v\x03\x02\x02\x02\x02\r\x03\x02\x02\x02\x02\x0F\x03\x02\x02" +
		"\x02\x02\x11\x03\x02\x02\x02\x02\x13\x03\x02\x02\x02\x02\x15\x03\x02\x02" +
		"\x02\x02\x17\x03\x02\x02\x02\x02\x19\x03\x02\x02\x02\x03!\x03\x02\x02" +
		"\x02\x05#\x03\x02\x02\x02\x07%\x03\x02\x02\x02\t\'\x03\x02\x02\x02\v)" +
		"\x03\x02\x02\x02\r+\x03\x02\x02\x02\x0F-\x03\x02\x02\x02\x112\x03\x02" +
		"\x02\x02\x138\x03\x02\x02\x02\x15>\x03\x02\x02\x02\x17X\x03\x02\x02\x02" +
		"\x19c\x03\x02\x02\x02\x1Bg\x03\x02\x02\x02\x1Dr\x03\x02\x02\x02\x1Ft\x03" +
		"\x02\x02\x02!\"\x07}\x02\x02\"\x04\x03\x02\x02\x02#$\x07\x7F\x02\x02$" +
		"\x06\x03\x02\x02\x02%&\x07]\x02\x02&\b\x03\x02\x02\x02\'(\x07_\x02\x02" +
		"(\n\x03\x02\x02\x02)*\x07<\x02\x02*\f\x03\x02\x02\x02+,\x07.\x02\x02," +
		"\x0E\x03\x02\x02\x02-.\x07v\x02\x02./\x07t\x02\x02/0\x07w\x02\x0201\x07" +
		"g\x02\x021\x10\x03\x02\x02\x0223\x07h\x02\x0234\x07c\x02\x0245\x07n\x02" +
		"\x0256\x07u\x02\x0267\x07g\x02\x027\x12\x03\x02\x02\x0289\x07p\x02\x02" +
		"9:\x07w\x02\x02:;\x07n\x02\x02;<\x07n\x02\x02<\x14\x03\x02\x02\x02=?\x07" +
		"/\x02\x02>=\x03\x02\x02\x02>?\x03\x02\x02\x02?A\x03\x02\x02\x02@B\x05" +
		"\x1B\x0E\x02A@\x03\x02\x02\x02BC\x03\x02\x02\x02CA\x03\x02\x02\x02CD\x03" +
		"\x02\x02\x02DK\x03\x02\x02\x02EG\x070\x02\x02FH\x05\x1B\x0E\x02GF\x03" +
		"\x02\x02\x02HI\x03\x02\x02\x02IG\x03\x02\x02\x02IJ\x03\x02\x02\x02JL\x03" +
		"\x02\x02\x02KE\x03\x02\x02\x02KL\x03\x02\x02\x02LV\x03\x02\x02\x02MO\t" +
		"\x02\x02\x02NP\t\x03\x02\x02ON\x03\x02\x02\x02OP\x03\x02\x02\x02PR\x03" +
		"\x02\x02\x02QS\x05\x1B\x0E\x02RQ\x03\x02\x02\x02ST\x03\x02\x02\x02TR\x03" +
		"\x02\x02\x02TU\x03\x02\x02\x02UW\x03\x02\x02\x02VM\x03\x02\x02\x02VW\x03" +
		"\x02\x02\x02W\x16\x03\x02\x02\x02X]\x07$\x02\x02Y\\\x05\x1D\x0F\x02Z\\" +
		"\n\x04\x02\x02[Y\x03\x02\x02\x02[Z\x03\x02\x02\x02\\_\x03\x02\x02\x02" +
		"][\x03\x02\x02\x02]^\x03\x02\x02\x02^`\x03\x02\x02\x02_]\x03\x02\x02\x02" +
		"`a\x07$\x02\x02a\x18\x03\x02\x02\x02bd\t\x05\x02\x02cb\x03\x02\x02\x02" +
		"de\x03\x02\x02\x02ec\x03\x02\x02\x02ef\x03\x02\x02\x02f\x1A\x03\x02\x02" +
		"\x02gh\t\x06\x02\x02h\x1C\x03\x02\x02\x02ij\x07^\x02\x02js\t\x07\x02\x02" +
		"kl\x07^\x02\x02lm\x07w\x02\x02mn\x05\x1F\x10\x02no\x05\x1F\x10\x02op\x05" +
		"\x1F\x10\x02pq\x05\x1F\x10\x02qs\x03\x02\x02\x02ri\x03\x02\x02\x02rk\x03" +
		"\x02\x02\x02s\x1E\x03\x02\x02\x02tu\t\b\x02\x02u \x03\x02\x02\x02\x0E" +
		"\x02>CIKOTV[]er\x02";
	public static __ATN: ATN;
	public static get _ATN(): ATN {
		if (!JsonMini.__ATN) {
			JsonMini.__ATN = new ATNDeserializer().deserialize(Utils.toCharArray(JsonMini._serializedATN));
		}

		return JsonMini.__ATN;
	}

}

