// Generated from src\grammars\antlr\MarkdownMini.g4 by ANTLR 4.9.0-SNAPSHOT


import { ATN } from "antlr4ts/atn/ATN";
import { ATNDeserializer } from "antlr4ts/atn/ATNDeserializer";
import { CharStream } from "antlr4ts/CharStream";
import { Lexer } from "antlr4ts/Lexer";
import { LexerATNSimulator } from "antlr4ts/atn/LexerATNSimulator";
import { NotNull } from "antlr4ts/Decorators";
import { Override } from "antlr4ts/Decorators";
import { RuleContext } from "antlr4ts/RuleContext";
import { Vocabulary } from "antlr4ts/Vocabulary";
import { VocabularyImpl } from "antlr4ts/VocabularyImpl";

import * as Utils from "antlr4ts/misc/Utils";


export class MarkdownMini extends Lexer {
	public static readonly HEADING = 1;
	public static readonly CODE_FENCE = 2;
	public static readonly INLINE_CODE = 3;
	public static readonly BOLD = 4;
	public static readonly ITALIC = 5;
	public static readonly LINK = 6;
	public static readonly COMMENT = 7;
	public static readonly TEXT = 8;
	public static readonly NEWLINE = 9;
	public static readonly WS = 10;

	// tslint:disable:no-trailing-whitespace
	public static readonly channelNames: string[] = [
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN",
	];

	// tslint:disable:no-trailing-whitespace
	public static readonly modeNames: string[] = [
		"DEFAULT_MODE",
	];

	public static readonly ruleNames: string[] = [
		"HEADING", "CODE_FENCE", "INLINE_CODE", "BOLD", "ITALIC", "LINK", "COMMENT", 
		"TEXT", "NEWLINE", "WS",
	];

	private static readonly _LITERAL_NAMES: Array<string | undefined> = [
	];
	private static readonly _SYMBOLIC_NAMES: Array<string | undefined> = [
		undefined, "HEADING", "CODE_FENCE", "INLINE_CODE", "BOLD", "ITALIC", "LINK", 
		"COMMENT", "TEXT", "NEWLINE", "WS",
	];
	public static readonly VOCABULARY: Vocabulary = new VocabularyImpl(MarkdownMini._LITERAL_NAMES, MarkdownMini._SYMBOLIC_NAMES, []);

	// @Override
	// @NotNull
	public get vocabulary(): Vocabulary {
		return MarkdownMini.VOCABULARY;
	}
	// tslint:enable:no-trailing-whitespace


	constructor(input: CharStream) {
		super(input);
		this._interp = new LexerATNSimulator(MarkdownMini._ATN, this);
	}

	// @Override
	public get grammarFileName(): string { return "MarkdownMini.g4"; }

	// @Override
	public get ruleNames(): string[] { return MarkdownMini.ruleNames; }

	// @Override
	public get serializedATN(): string { return MarkdownMini._serializedATN; }

	// @Override
	public get channelNames(): string[] { return MarkdownMini.channelNames; }

	// @Override
	public get modeNames(): string[] { return MarkdownMini.modeNames; }

	public static readonly _serializedATN: string =
		"\x03\uC91D\uCABA\u058D\uAFBA\u4F53\u0607\uEA8B\uC241\x02\f\x85\b\x01\x04" +
		"\x02\t\x02\x04\x03\t\x03\x04\x04\t\x04\x04\x05\t\x05\x04\x06\t\x06\x04" +
		"\x07\t\x07\x04\b\t\b\x04\t\t\t\x04\n\t\n\x04\v\t\v\x03\x02\x06\x02\x19" +
		"\n\x02\r\x02\x0E\x02\x1A\x03\x02\x06\x02\x1E\n\x02\r\x02\x0E\x02\x1F\x03" +
		"\x02\x07\x02#\n\x02\f\x02\x0E\x02&\v\x02\x03\x03\x03\x03\x03\x03\x03\x03" +
		"\x03\x03\x07\x03-\n\x03\f\x03\x0E\x030\v\x03\x03\x03\x05\x033\n\x03\x03" +
		"\x03\x05\x036\n\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x04\x03\x04\x06" +
		"\x04>\n\x04\r\x04\x0E\x04?\x03\x04\x03\x04\x03\x05\x03\x05\x03\x05\x03" +
		"\x05\x03\x05\x03\x05\x06\x05J\n\x05\r\x05\x0E\x05K\x03\x05\x03\x05\x03" +
		"\x05\x03\x06\x03\x06\x06\x06S\n\x06\r\x06\x0E\x06T\x03\x06\x03\x06\x03" +
		"\x07\x03\x07\x06\x07[\n\x07\r\x07\x0E\x07\\\x03\x07\x03\x07\x03\x07\x06" +
		"\x07b\n\x07\r\x07\x0E\x07c\x03\x07\x03\x07\x03\b\x03\b\x03\b\x03\b\x03" +
		"\b\x03\b\x07\bn\n\b\f\b\x0E\bq\v\b\x03\b\x03\b\x03\b\x03\b\x03\t\x06\t" +
		"x\n\t\r\t\x0E\ty\x03\n\x05\n}\n\n\x03\n\x03\n\x03\v\x06\v\x82\n\v\r\v" +
		"\x0E\v\x83\x03o\x02\x02\f\x03\x02\x03\x05\x02\x04\x07\x02\x05\t\x02\x06" +
		"\v\x02\x07\r\x02\b\x0F\x02\t\x11\x02\n\x13\x02\v\x15\x02\f\x03\x02\t\x04" +
		"\x02\f\f\x0F\x0F\x05\x02\f\f\x0F\x0Fbb\x05\x02\f\f\x0F\x0F,,\x03\x02," +
		",\x05\x02\f\f\x0F\x0F__\x05\x02\f\f\x0F\x0F++\x04\x02\v\v\"\"\x02\x94" +
		"\x02\x03\x03\x02\x02\x02\x02\x05\x03\x02\x02\x02\x02\x07\x03\x02\x02\x02" +
		"\x02\t\x03\x02\x02\x02\x02\v\x03\x02\x02\x02\x02\r\x03\x02\x02\x02\x02" +
		"\x0F\x03\x02\x02\x02\x02\x11\x03\x02\x02\x02\x02\x13\x03\x02\x02\x02\x02" +
		"\x15\x03\x02\x02\x02\x03\x18\x03\x02\x02\x02\x05\'\x03\x02\x02\x02\x07" +
		";\x03\x02\x02\x02\tC\x03\x02\x02\x02\vP\x03\x02\x02\x02\rX\x03\x02\x02" +
		"\x02\x0Fg\x03\x02\x02\x02\x11w\x03\x02\x02\x02\x13|\x03\x02\x02\x02\x15" +
		"\x81\x03\x02\x02\x02\x17\x19\x07%\x02\x02\x18\x17\x03\x02\x02\x02\x19" +
		"\x1A\x03\x02\x02\x02\x1A\x18\x03\x02\x02\x02\x1A\x1B\x03\x02\x02\x02\x1B" +
		"\x1D\x03\x02\x02\x02\x1C\x1E\x07\"\x02\x02\x1D\x1C\x03\x02\x02\x02\x1E" +
		"\x1F\x03\x02\x02\x02\x1F\x1D\x03\x02\x02\x02\x1F \x03\x02\x02\x02 $\x03" +
		"\x02\x02\x02!#\n\x02\x02\x02\"!\x03\x02\x02\x02#&\x03\x02\x02\x02$\"\x03" +
		"\x02\x02\x02$%\x03\x02\x02\x02%\x04\x03\x02\x02\x02&$\x03\x02\x02\x02" +
		"\'(\x07b\x02\x02()\x07b\x02\x02)*\x07b\x02\x02*.\x03\x02\x02\x02+-\n\x02" +
		"\x02\x02,+\x03\x02\x02\x02-0\x03\x02\x02\x02.,\x03\x02\x02\x02./\x03\x02" +
		"\x02\x02/5\x03\x02\x02\x020.\x03\x02\x02\x0213\x07\x0F\x02\x0221\x03\x02" +
		"\x02\x0223\x03\x02\x02\x0234\x03\x02\x02\x0246\x07\f\x02\x0252\x03\x02" +
		"\x02\x0256\x03\x02\x02\x0267\x03\x02\x02\x0278\x07b\x02\x0289\x07b\x02" +
		"\x029:\x07b\x02\x02:\x06\x03\x02\x02\x02;=\x07b\x02\x02<>\n\x03\x02\x02" +
		"=<\x03\x02\x02\x02>?\x03\x02\x02\x02?=\x03\x02\x02\x02?@\x03\x02\x02\x02" +
		"@A\x03\x02\x02\x02AB\x07b\x02\x02B\b\x03\x02\x02\x02CD\x07,\x02\x02DE" +
		"\x07,\x02\x02EI\x03\x02\x02\x02FJ\n\x04\x02\x02GH\x07,\x02\x02HJ\n\x05" +
		"\x02\x02IF\x03\x02\x02\x02IG\x03\x02\x02\x02JK\x03\x02\x02\x02KI\x03\x02" +
		"\x02\x02KL\x03\x02\x02\x02LM\x03\x02\x02\x02MN\x07,\x02\x02NO\x07,\x02" +
		"\x02O\n\x03\x02\x02\x02PR\x07,\x02\x02QS\n\x04\x02\x02RQ\x03\x02\x02\x02" +
		"ST\x03\x02\x02\x02TR\x03\x02\x02\x02TU\x03\x02\x02\x02UV\x03\x02\x02\x02" +
		"VW\x07,\x02\x02W\f\x03\x02\x02\x02XZ\x07]\x02\x02Y[\n\x06\x02\x02ZY\x03" +
		"\x02\x02\x02[\\\x03\x02\x02\x02\\Z\x03\x02\x02\x02\\]\x03\x02\x02\x02" +
		"]^\x03\x02\x02\x02^_\x07_\x02\x02_a\x07*\x02\x02`b\n\x07\x02\x02a`\x03" +
		"\x02\x02\x02bc\x03\x02\x02\x02ca\x03\x02\x02\x02cd\x03\x02\x02\x02de\x03" +
		"\x02\x02\x02ef\x07+\x02\x02f\x0E\x03\x02\x02\x02gh\x07>\x02\x02hi\x07" +
		"#\x02\x02ij\x07/\x02\x02jk\x07/\x02\x02ko\x03\x02\x02\x02ln\v\x02\x02" +
		"\x02ml\x03\x02\x02\x02nq\x03\x02\x02\x02op\x03\x02\x02\x02om\x03\x02\x02" +
		"\x02pr\x03\x02\x02\x02qo\x03\x02\x02\x02rs\x07/\x02\x02st\x07/\x02\x02" +
		"tu\x07@\x02\x02u\x10\x03\x02\x02\x02vx\n\x02\x02\x02wv\x03\x02\x02\x02" +
		"xy\x03\x02\x02\x02yw\x03\x02\x02\x02yz\x03\x02\x02\x02z\x12\x03\x02\x02" +
		"\x02{}\x07\x0F\x02\x02|{\x03\x02\x02\x02|}\x03\x02\x02\x02}~\x03\x02\x02" +
		"\x02~\x7F\x07\f\x02\x02\x7F\x14\x03\x02\x02\x02\x80\x82\t\b\x02\x02\x81" +
		"\x80\x03\x02\x02\x02\x82\x83\x03\x02\x02\x02\x83\x81\x03\x02\x02\x02\x83" +
		"\x84\x03\x02\x02\x02\x84\x16\x03\x02\x02\x02\x13\x02\x1A\x1F$.25?IKT\\" +
		"coy|\x83\x02";
	public static __ATN: ATN;
	public static get _ATN(): ATN {
		if (!MarkdownMini.__ATN) {
			MarkdownMini.__ATN = new ATNDeserializer().deserialize(Utils.toCharArray(MarkdownMini._serializedATN));
		}

		return MarkdownMini.__ATN;
	}

}

