// Generated from src\grammars\antlr\BashMini.g4 by ANTLR 4.9.0-SNAPSHOT


import { ATN } from "antlr4ts/atn/ATN";
import { ATNDeserializer } from "antlr4ts/atn/ATNDeserializer";
import { CharStream } from "antlr4ts/CharStream";
import { Lexer } from "antlr4ts/Lexer";
import { LexerATNSimulator } from "antlr4ts/atn/LexerATNSimulator";
import { NotNull } from "antlr4ts/Decorators";
import { Override } from "antlr4ts/Decorators";
import { RuleContext } from "antlr4ts/RuleContext";
import { Vocabulary } from "antlr4ts/Vocabulary";
import { VocabularyImpl } from "antlr4ts/VocabularyImpl";

import * as Utils from "antlr4ts/misc/Utils";


export class BashMini extends Lexer {
	public static readonly KEYWORD = 1;
	public static readonly COMMENT = 2;
	public static readonly STRING_DOUBLE = 3;
	public static readonly STRING_SINGLE = 4;
	public static readonly VAR = 5;
	public static readonly NUMBER = 6;
	public static readonly IDENTIFIER = 7;
	public static readonly PUNCT = 8;
	public static readonly WS = 9;

	// tslint:disable:no-trailing-whitespace
	public static readonly channelNames: string[] = [
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN",
	];

	// tslint:disable:no-trailing-whitespace
	public static readonly modeNames: string[] = [
		"DEFAULT_MODE",
	];

	public static readonly ruleNames: string[] = [
		"KEYWORD", "COMMENT", "STRING_DOUBLE", "STRING_SINGLE", "VAR", "NUMBER", 
		"IDENTIFIER", "PUNCT", "WS", "DIGIT", "ESC",
	];

	private static readonly _LITERAL_NAMES: Array<string | undefined> = [
	];
	private static readonly _SYMBOLIC_NAMES: Array<string | undefined> = [
		undefined, "KEYWORD", "COMMENT", "STRING_DOUBLE", "STRING_SINGLE", "VAR", 
		"NUMBER", "IDENTIFIER", "PUNCT", "WS",
	];
	public static readonly VOCABULARY: Vocabulary = new VocabularyImpl(BashMini._LITERAL_NAMES, BashMini._SYMBOLIC_NAMES, []);

	// @Override
	// @NotNull
	public get vocabulary(): Vocabulary {
		return BashMini.VOCABULARY;
	}
	// tslint:enable:no-trailing-whitespace


	constructor(input: CharStream) {
		super(input);
		this._interp = new LexerATNSimulator(BashMini._ATN, this);
	}

	// @Override
	public get grammarFileName(): string { return "BashMini.g4"; }

	// @Override
	public get ruleNames(): string[] { return BashMini.ruleNames; }

	// @Override
	public get serializedATN(): string { return BashMini._serializedATN; }

	// @Override
	public get channelNames(): string[] { return BashMini.channelNames; }

	// @Override
	public get modeNames(): string[] { return BashMini.modeNames; }

	public static readonly _serializedATN: string =
		"\x03\uC91D\uCABA\u058D\uAFBA\u4F53\u0607\uEA8B\uC241\x02\v\x8F\b\x01\x04" +
		"\x02\t\x02\x04\x03\t\x03\x04\x04\t\x04\x04\x05\t\x05\x04\x06\t\x06\x04" +
		"\x07\t\x07\x04\b\t\b\x04\t\t\t\x04\n\t\n\x04\v\t\v\x04\f\t\f\x03\x02\x03" +
		"\x02\x03\x02\x03\x02\x03\x02\x03\x02\x03\x02\x03\x02\x03\x02\x03\x02\x03" +
		"\x02\x03\x02\x03\x02\x03\x02\x03\x02\x03\x02\x03\x02\x03\x02\x03\x02\x03" +
		"\x02\x03\x02\x03\x02\x03\x02\x03\x02\x03\x02\x03\x02\x03\x02\x03\x02\x03" +
		"\x02\x03\x02\x03\x02\x03\x02\x03\x02\x03\x02\x03\x02\x03\x02\x03\x02\x03" +
		"\x02\x03\x02\x03\x02\x03\x02\x03\x02\x03\x02\x03\x02\x03\x02\x03\x02\x03" +
		"\x02\x03\x02\x03\x02\x03\x02\x03\x02\x03\x02\x03\x02\x03\x02\x03\x02\x03" +
		"\x02\x03\x02\x03\x02\x05\x02T\n\x02\x03\x03\x03\x03\x07\x03X\n\x03\f\x03" +
		"\x0E\x03[\v\x03\x03\x04\x03\x04\x03\x04\x07\x04`\n\x04\f\x04\x0E\x04c" +
		"\v\x04\x03\x04\x03\x04\x03\x05\x03\x05\x07\x05i\n\x05\f\x05\x0E\x05l\v" +
		"\x05\x03\x05\x03\x05\x03\x06\x03\x06\x03\x06\x07\x06s\n\x06\f\x06\x0E" +
		"\x06v\v\x06\x03\x07\x06\x07y\n\x07\r\x07\x0E\x07z\x03\b\x03\b\x07\b\x7F" +
		"\n\b\f\b\x0E\b\x82\v\b\x03\t\x03\t\x03\n\x06\n\x87\n\n\r\n\x0E\n\x88\x03" +
		"\v\x03\v\x03\f\x03\f\x03\f\x02\x02\x02\r\x03\x02\x03\x05\x02\x04\x07\x02" +
		"\x05\t\x02\x06\v\x02\x07\r\x02\b\x0F\x02\t\x11\x02\n\x13\x02\v\x15\x02" +
		"\x02\x17\x02\x02\x03\x02\n\x04\x02\f\f\x0F\x0F\x06\x02\f\f\x0F\x0F$$^" +
		"^\x05\x02\f\f\x0F\x0F))\x05\x02C\\aac|\x06\x022;C\\aac|\t\x02##\'(*1<" +
		"A]]_`}\x7F\x05\x02\v\f\x0F\x0F\"\"\x03\x022;\x02\xA2\x02\x03\x03\x02\x02" +
		"\x02\x02\x05\x03\x02\x02\x02\x02\x07\x03\x02\x02\x02\x02\t\x03\x02\x02" +
		"\x02\x02\v\x03\x02\x02\x02\x02\r\x03\x02\x02\x02\x02\x0F\x03\x02\x02\x02" +
		"\x02\x11\x03\x02\x02\x02\x02\x13\x03\x02\x02\x02\x03S\x03\x02\x02\x02" +
		"\x05U\x03\x02\x02\x02\x07\\\x03\x02\x02\x02\tf\x03\x02\x02\x02\vo\x03" +
		"\x02\x02\x02\rx\x03\x02\x02\x02\x0F|\x03\x02\x02\x02\x11\x83\x03\x02\x02" +
		"\x02\x13\x86\x03\x02\x02\x02\x15\x8A\x03\x02\x02\x02\x17\x8C\x03\x02\x02" +
		"\x02\x19\x1A\x07k\x02\x02\x1AT\x07h\x02\x02\x1B\x1C\x07v\x02\x02\x1C\x1D" +
		"\x07j\x02\x02\x1D\x1E\x07g\x02\x02\x1ET\x07p\x02\x02\x1F \x07g\x02\x02" +
		" !\x07n\x02\x02!\"\x07u\x02\x02\"T\x07g\x02\x02#$\x07g\x02\x02$%\x07n" +
		"\x02\x02%&\x07k\x02\x02&T\x07h\x02\x02\'(\x07h\x02\x02(T\x07k\x02\x02" +
		")*\x07h\x02\x02*+\x07q\x02\x02+T\x07t\x02\x02,-\x07y\x02\x02-.\x07j\x02" +
		"\x02./\x07k\x02\x02/0\x07n\x02\x020T\x07g\x02\x0212\x07k\x02\x022T\x07" +
		"p\x02\x0234\x07f\x02\x024T\x07q\x02\x0256\x07f\x02\x0267\x07q\x02\x02" +
		"78\x07p\x02\x028T\x07g\x02\x029:\x07e\x02\x02:;\x07c\x02\x02;<\x07u\x02" +
		"\x02<T\x07g\x02\x02=>\x07g\x02\x02>?\x07u\x02\x02?@\x07c\x02\x02@T\x07" +
		"e\x02\x02AB\x07h\x02\x02BC\x07w\x02\x02CD\x07p\x02\x02DE\x07e\x02\x02" +
		"EF\x07v\x02\x02FG\x07k\x02\x02GH\x07q\x02\x02HT\x07p\x02\x02IJ\x07u\x02" +
		"\x02JK\x07g\x02\x02KL\x07n\x02\x02LM\x07g\x02\x02MN\x07e\x02\x02NT\x07" +
		"v\x02\x02OP\x07v\x02\x02PQ\x07k\x02\x02QR\x07o\x02\x02RT\x07g\x02\x02" +
		"S\x19\x03\x02\x02\x02S\x1B\x03\x02\x02\x02S\x1F\x03\x02\x02\x02S#\x03" +
		"\x02\x02\x02S\'\x03\x02\x02\x02S)\x03\x02\x02\x02S,\x03\x02\x02\x02S1" +
		"\x03\x02\x02\x02S3\x03\x02\x02\x02S5\x03\x02\x02\x02S9\x03\x02\x02\x02" +
		"S=\x03\x02\x02\x02SA\x03\x02\x02\x02SI\x03\x02\x02\x02SO\x03\x02\x02\x02" +
		"T\x04\x03\x02\x02\x02UY\x07%\x02\x02VX\n\x02\x02\x02WV\x03\x02\x02\x02" +
		"X[\x03\x02\x02\x02YW\x03\x02\x02\x02YZ\x03\x02\x02\x02Z\x06\x03\x02\x02" +
		"\x02[Y\x03\x02\x02\x02\\a\x07$\x02\x02]`\x05\x17\f\x02^`\n\x03\x02\x02" +
		"_]\x03\x02\x02\x02_^\x03\x02\x02\x02`c\x03\x02\x02\x02a_\x03\x02\x02\x02" +
		"ab\x03\x02\x02\x02bd\x03\x02\x02\x02ca\x03\x02\x02\x02de\x07$\x02\x02" +
		"e\b\x03\x02\x02\x02fj\x07)\x02\x02gi\n\x04\x02\x02hg\x03\x02\x02\x02i" +
		"l\x03\x02\x02\x02jh\x03\x02\x02\x02jk\x03\x02\x02\x02km\x03\x02\x02\x02" +
		"lj\x03\x02\x02\x02mn\x07)\x02\x02n\n\x03\x02\x02\x02op\x07&\x02\x02pt" +
		"\t\x05\x02\x02qs\t\x06\x02\x02rq\x03\x02\x02\x02sv\x03\x02\x02\x02tr\x03" +
		"\x02\x02\x02tu\x03\x02\x02\x02u\f\x03\x02\x02\x02vt\x03\x02\x02\x02wy" +
		"\x05\x15\v\x02xw\x03\x02\x02\x02yz\x03\x02\x02\x02zx\x03\x02\x02\x02z" +
		"{\x03\x02\x02\x02{\x0E\x03\x02\x02\x02|\x80\t\x05\x02\x02}\x7F\t\x06\x02" +
		"\x02~}\x03\x02\x02\x02\x7F\x82\x03\x02\x02\x02\x80~\x03\x02\x02\x02\x80" +
		"\x81\x03\x02\x02\x02\x81\x10\x03\x02\x02\x02\x82\x80\x03\x02\x02\x02\x83" +
		"\x84\t\x07\x02\x02\x84\x12\x03\x02\x02\x02\x85\x87\t\b\x02\x02\x86\x85" +
		"\x03\x02\x02\x02\x87\x88\x03\x02\x02\x02\x88\x86\x03\x02\x02\x02\x88\x89" +
		"\x03\x02\x02\x02\x89\x14\x03\x02\x02\x02\x8A\x8B\t\t\x02\x02\x8B\x16\x03" +
		"\x02\x02\x02\x8C\x8D\x07^\x02\x02\x8D\x8E\v\x02\x02\x02\x8E\x18\x03\x02" +
		"\x02\x02\f\x02SY_ajtz\x80\x88\x02";
	public static __ATN: ATN;
	public static get _ATN(): ATN {
		if (!BashMini.__ATN) {
			BashMini.__ATN = new ATNDeserializer().deserialize(Utils.toCharArray(BashMini._serializedATN));
		}

		return BashMini.__ATN;
	}

}

