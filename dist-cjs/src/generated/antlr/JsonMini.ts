// Generated from src/grammars/antlr/JsonMini.g4 by ANTLR 4.9.0-SNAPSHOT


import { ATN } from "antlr4ts/atn/ATN";
import { ATNDeserializer } from "antlr4ts/atn/ATNDeserializer";
import { CharStream } from "antlr4ts/CharStream";
import { Lexer } from "antlr4ts/Lexer";
import { LexerATNSimulator } from "antlr4ts/atn/LexerATNSimulator";
import { NotNull } from "antlr4ts/Decorators";
import { Override } from "antlr4ts/Decorators";
import { RuleContext } from "antlr4ts/RuleContext";
import { Vocabulary } from "antlr4ts/Vocabulary";
import { VocabularyImpl } from "antlr4ts/VocabularyImpl";

import * as Utils from "antlr4ts/misc/Utils";


export class JsonMini extends Lexer {
	public static readonly LCURLY = 1;
	public static readonly RCURLY = 2;
	public static readonly LBRACK = 3;
	public static readonly RBRACK = 4;
	public static readonly COLON = 5;
	public static readonly COMMA = 6;
	public static readonly TRUE = 7;
	public static readonly FALSE = 8;
	public static readonly NULL = 9;
	public static readonly NUMBER = 10;
	public static readonly STRING = 11;
	public static readonly WS = 12;

	// tslint:disable:no-trailing-whitespace
	public static readonly channelNames: string[] = [
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN",
	];

	// tslint:disable:no-trailing-whitespace
	public static readonly modeNames: string[] = [
		"DEFAULT_MODE",
	];

	public static readonly ruleNames: string[] = [
		"LCURLY", "RCURLY", "LBRACK", "RBRACK", "COLON", "COMMA", "TRUE", "FALSE", 
		"NULL", "NUMBER", "STRING", "WS", "MINUS", "INT", "DIGITS", "DIGIT", "FRACTION", 
		"EXPONENT", "ESC", "UNICODE", "HEX",
	];

	private static readonly _LITERAL_NAMES: Array<string | undefined> = [
		undefined, "'{'", "'}'", "'['", "']'", "':'", "','", "'true'", "'false'", 
		"'null'",
	];
	private static readonly _SYMBOLIC_NAMES: Array<string | undefined> = [
		undefined, "LCURLY", "RCURLY", "LBRACK", "RBRACK", "COLON", "COMMA", "TRUE", 
		"FALSE", "NULL", "NUMBER", "STRING", "WS",
	];
	public static readonly VOCABULARY: Vocabulary = new VocabularyImpl(JsonMini._LITERAL_NAMES, JsonMini._SYMBOLIC_NAMES, []);

	// @Override
	// @NotNull
	public get vocabulary(): Vocabulary {
		return JsonMini.VOCABULARY;
	}
	// tslint:enable:no-trailing-whitespace


	constructor(input: CharStream) {
		super(input);
		this._interp = new LexerATNSimulator(JsonMini._ATN, this);
	}

	// @Override
	public get grammarFileName(): string { return "JsonMini.g4"; }

	// @Override
	public get ruleNames(): string[] { return JsonMini.ruleNames; }

	// @Override
	public get serializedATN(): string { return JsonMini._serializedATN; }

	// @Override
	public get channelNames(): string[] { return JsonMini.channelNames; }

	// @Override
	public get modeNames(): string[] { return JsonMini.modeNames; }

	public static readonly _serializedATN: string =
		"\x03\uC91D\uCABA\u058D\uAFBA\u4F53\u0607\uEA8B\uC241\x02\x0E\x89\b\x01" +
		"\x04\x02\t\x02\x04\x03\t\x03\x04\x04\t\x04\x04\x05\t\x05\x04\x06\t\x06" +
		"\x04\x07\t\x07\x04\b\t\b\x04\t\t\t\x04\n\t\n\x04\v\t\v\x04\f\t\f\x04\r" +
		"\t\r\x04\x0E\t\x0E\x04\x0F\t\x0F\x04\x10\t\x10\x04\x11\t\x11\x04\x12\t" +
		"\x12\x04\x13\t\x13\x04\x14\t\x14\x04\x15\t\x15\x04\x16\t\x16\x03\x02\x03" +
		"\x02\x03\x03\x03\x03\x03\x04\x03\x04\x03\x05\x03\x05\x03\x06\x03\x06\x03" +
		"\x07\x03\x07\x03\b\x03\b\x03\b\x03\b\x03\b\x03\t\x03\t\x03\t\x03\t\x03" +
		"\t\x03\t\x03\n\x03\n\x03\n\x03\n\x03\n\x03\v\x05\vK\n\v\x03\v\x03\v\x05" +
		"\vO\n\v\x03\v\x05\vR\n\v\x03\f\x03\f\x03\f\x07\fW\n\f\f\f\x0E\fZ\v\f\x03" +
		"\f\x03\f\x03\r\x06\r_\n\r\r\r\x0E\r`\x03\x0E\x03\x0E\x03\x0F\x03\x0F\x03" +
		"\x0F\x05\x0Fh\n\x0F\x05\x0Fj\n\x0F\x03\x10\x06\x10m\n\x10\r\x10\x0E\x10" +
		"n\x03\x11\x03\x11\x03\x12\x03\x12\x03\x12\x03\x13\x03\x13\x05\x13x\n\x13" +
		"\x03\x13\x03\x13\x03\x14\x03\x14\x03\x14\x05\x14\x7F\n\x14\x03\x15\x03" +
		"\x15\x03\x15\x03\x15\x03\x15\x03\x15\x03\x15\x03\x16\x03\x16\x02\x02\x02" +
		"\x17\x03\x02\x03\x05\x02\x04\x07\x02\x05\t\x02\x06\v\x02\x07\r\x02\b\x0F" +
		"\x02\t\x11\x02\n\x13\x02\v\x15\x02\f\x17\x02\r\x19\x02\x0E\x1B\x02\x02" +
		"\x1D\x02\x02\x1F\x02\x02!\x02\x02#\x02\x02%\x02\x02\'\x02\x02)\x02\x02" +
		"+\x02\x02\x03\x02\n\x06\x02\f\f\x0F\x0F$$^^\x05\x02\v\f\x0F\x0F\"\"\x03" +
		"\x023;\x03\x022;\x04\x02GGgg\x04\x02--//\n\x02$$11^^ddhhppttvv\x05\x02" +
		"2;CHch\x02\x8A\x02\x03\x03\x02\x02\x02\x02\x05\x03\x02\x02\x02\x02\x07" +
		"\x03\x02\x02\x02\x02\t\x03\x02\x02\x02\x02\v\x03\x02\x02\x02\x02\r\x03" +
		"\x02\x02\x02\x02\x0F\x03\x02\x02\x02\x02\x11\x03\x02\x02\x02\x02\x13\x03" +
		"\x02\x02\x02\x02\x15\x03\x02\x02\x02\x02\x17\x03\x02\x02\x02\x02\x19\x03" +
		"\x02\x02\x02\x03-\x03\x02\x02\x02\x05/\x03\x02\x02\x02\x071\x03\x02\x02" +
		"\x02\t3\x03\x02\x02\x02\v5\x03\x02\x02\x02\r7\x03\x02\x02\x02\x0F9\x03" +
		"\x02\x02\x02\x11>\x03\x02\x02\x02\x13D\x03\x02\x02\x02\x15J\x03\x02\x02" +
		"\x02\x17S\x03\x02\x02\x02\x19^\x03\x02\x02\x02\x1Bb\x03\x02\x02\x02\x1D" +
		"i\x03\x02\x02\x02\x1Fl\x03\x02\x02\x02!p\x03\x02\x02\x02#r\x03\x02\x02" +
		"\x02%u\x03\x02\x02\x02\'~\x03\x02\x02\x02)\x80\x03\x02\x02\x02+\x87\x03" +
		"\x02\x02\x02-.\x07}\x02\x02.\x04\x03\x02\x02\x02/0\x07\x7F\x02\x020\x06" +
		"\x03\x02\x02\x0212\x07]\x02\x022\b\x03\x02\x02\x0234\x07_\x02\x024\n\x03" +
		"\x02\x02\x0256\x07<\x02\x026\f\x03\x02\x02\x0278\x07.\x02\x028\x0E\x03" +
		"\x02\x02\x029:\x07v\x02\x02:;\x07t\x02\x02;<\x07w\x02\x02<=\x07g\x02\x02" +
		"=\x10\x03\x02\x02\x02>?\x07h\x02\x02?@\x07c\x02\x02@A\x07n\x02\x02AB\x07" +
		"u\x02\x02BC\x07g\x02\x02C\x12\x03\x02\x02\x02DE\x07p\x02\x02EF\x07w\x02" +
		"\x02FG\x07n\x02\x02GH\x07n\x02\x02H\x14\x03\x02\x02\x02IK\x05\x1B\x0E" +
		"\x02JI\x03\x02\x02\x02JK\x03\x02\x02\x02KL\x03\x02\x02\x02LN\x05\x1D\x0F" +
		"\x02MO\x05#\x12\x02NM\x03\x02\x02\x02NO\x03\x02\x02\x02OQ\x03\x02\x02" +
		"\x02PR\x05%\x13\x02QP\x03\x02\x02\x02QR\x03\x02\x02\x02R\x16\x03\x02\x02" +
		"\x02SX\x07$\x02\x02TW\x05\'\x14\x02UW\n\x02\x02\x02VT\x03\x02\x02\x02" +
		"VU\x03\x02\x02\x02WZ\x03\x02\x02\x02XV\x03\x02\x02\x02XY\x03\x02\x02\x02" +
		"Y[\x03\x02\x02\x02ZX\x03\x02\x02\x02[\\\x07$\x02\x02\\\x18\x03\x02\x02" +
		"\x02]_\t\x03\x02\x02^]\x03\x02\x02\x02_`\x03\x02\x02\x02`^\x03\x02\x02" +
		"\x02`a\x03\x02\x02\x02a\x1A\x03\x02\x02\x02bc\x07/\x02\x02c\x1C\x03\x02" +
		"\x02\x02dj\x072\x02\x02eg\t\x04\x02\x02fh\x05\x1F\x10\x02gf\x03\x02\x02" +
		"\x02gh\x03\x02\x02\x02hj\x03\x02\x02\x02id\x03\x02\x02\x02ie\x03\x02\x02" +
		"\x02j\x1E\x03\x02\x02\x02km\x05!\x11\x02lk\x03\x02\x02\x02mn\x03\x02\x02" +
		"\x02nl\x03\x02\x02\x02no\x03\x02\x02\x02o \x03\x02\x02\x02pq\t\x05\x02" +
		"\x02q\"\x03\x02\x02\x02rs\x070\x02\x02st\x05\x1F\x10\x02t$\x03\x02\x02" +
		"\x02uw\t\x06\x02\x02vx\t\x07\x02\x02wv\x03\x02\x02\x02wx\x03\x02\x02\x02" +
		"xy\x03\x02\x02\x02yz\x05\x1F\x10\x02z&\x03\x02\x02\x02{|\x07^\x02\x02" +
		"|\x7F\t\b\x02\x02}\x7F\x05)\x15\x02~{\x03\x02\x02\x02~}\x03\x02\x02\x02" +
		"\x7F(\x03\x02\x02\x02\x80\x81\x07^\x02\x02\x81\x82\x07w\x02\x02\x82\x83" +
		"\x05+\x16\x02\x83\x84\x05+\x16\x02\x84\x85\x05+\x16\x02\x85\x86\x05+\x16" +
		"\x02\x86*\x03\x02\x02\x02\x87\x88\t\t\x02\x02\x88,\x03\x02\x02\x02\x0E" +
		"\x02JNQVX`ginw~\x02";
	public static __ATN: ATN;
	public static get _ATN(): ATN {
		if (!JsonMini.__ATN) {
			JsonMini.__ATN = new ATNDeserializer().deserialize(Utils.toCharArray(JsonMini._serializedATN));
		}

		return JsonMini.__ATN;
	}

}

