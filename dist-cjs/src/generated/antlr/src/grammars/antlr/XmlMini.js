"use strict";
// Generated from src/grammars/antlr/XmlMini.g4 by ANTLR 4.9.0-SNAPSHOT
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.XmlMini = void 0;
const ATNDeserializer_1 = require("antlr4ts/atn/ATNDeserializer");
const Lexer_1 = require("antlr4ts/Lexer");
const LexerATNSimulator_1 = require("antlr4ts/atn/LexerATNSimulator");
const VocabularyImpl_1 = require("antlr4ts/VocabularyImpl");
const Utils = __importStar(require("antlr4ts/misc/Utils"));
class XmlMini extends Lexer_1.Lexer {
    static LPAREN = 1;
    static RPAREN = 2;
    static LBRACE = 3;
    static RBRACE = 4;
    static LBRACKET = 5;
    static RBRACKET = 6;
    static LT = 7;
    static GT = 8;
    static SLASH = 9;
    static EQUALS = 10;
    static QUESTION = 11;
    static XML_COMMENT = 12;
    static PROCESSING_INSTRUCTION = 13;
    static XML_DECLARATION = 14;
    static CDATA_SECTION = 15;
    static DOCTYPE = 16;
    static XML_ENTITY = 17;
    static DOUBLE_QUOTED_STRING = 18;
    static SINGLE_QUOTED_STRING = 19;
    static NUMBER = 20;
    static CLOSING_TAG = 21;
    static ATTRIBUTE_NAME = 22;
    static NAMESPACE_PREFIX = 23;
    static TEXT_CONTENT = 24;
    static NEWLINE = 25;
    static WHITESPACE = 26;
    // tslint:disable:no-trailing-whitespace
    static channelNames = [
        "DEFAULT_TOKEN_CHANNEL", "HIDDEN",
    ];
    // tslint:disable:no-trailing-whitespace
    static modeNames = [
        "DEFAULT_MODE",
    ];
    static ruleNames = [
        "LPAREN", "RPAREN", "LBRACE", "RBRACE", "LBRACKET", "RBRACKET", "LT",
        "GT", "SLASH", "EQUALS", "QUESTION", "XML_COMMENT", "PROCESSING_INSTRUCTION",
        "XML_DECLARATION", "CDATA_SECTION", "DOCTYPE", "XML_ENTITY", "DOUBLE_QUOTED_STRING",
        "SINGLE_QUOTED_STRING", "NUMBER", "CLOSING_TAG", "ATTRIBUTE_NAME", "NAMESPACE_PREFIX",
        "TEXT_CONTENT", "NEWLINE", "WHITESPACE",
    ];
    static _LITERAL_NAMES = [
        undefined, "'('", "')'", "'{'", "'}'", "'['", "']'", "'<'", "'>'", "'/'",
        "'='", "'?'",
    ];
    static _SYMBOLIC_NAMES = [
        undefined, "LPAREN", "RPAREN", "LBRACE", "RBRACE", "LBRACKET", "RBRACKET",
        "LT", "GT", "SLASH", "EQUALS", "QUESTION", "XML_COMMENT", "PROCESSING_INSTRUCTION",
        "XML_DECLARATION", "CDATA_SECTION", "DOCTYPE", "XML_ENTITY", "DOUBLE_QUOTED_STRING",
        "SINGLE_QUOTED_STRING", "NUMBER", "CLOSING_TAG", "ATTRIBUTE_NAME", "NAMESPACE_PREFIX",
        "TEXT_CONTENT", "NEWLINE", "WHITESPACE",
    ];
    static VOCABULARY = new VocabularyImpl_1.VocabularyImpl(XmlMini._LITERAL_NAMES, XmlMini._SYMBOLIC_NAMES, []);
    // @Override
    // @NotNull
    get vocabulary() {
        return XmlMini.VOCABULARY;
    }
    // tslint:enable:no-trailing-whitespace
    constructor(input) {
        super(input);
        this._interp = new LexerATNSimulator_1.LexerATNSimulator(XmlMini._ATN, this);
    }
    // @Override
    get grammarFileName() { return "XmlMini.g4"; }
    // @Override
    get ruleNames() { return XmlMini.ruleNames; }
    // @Override
    get serializedATN() { return XmlMini._serializedATN; }
    // @Override
    get channelNames() { return XmlMini.channelNames; }
    // @Override
    get modeNames() { return XmlMini.modeNames; }
    static _serializedATN = "\x03\uC91D\uCABA\u058D\uAFBA\u4F53\u0607\uEA8B\uC241\x02\x1C\u010E\b\x01" +
        "\x04\x02\t\x02\x04\x03\t\x03\x04\x04\t\x04\x04\x05\t\x05\x04\x06\t\x06" +
        "\x04\x07\t\x07\x04\b\t\b\x04\t\t\t\x04\n\t\n\x04\v\t\v\x04\f\t\f\x04\r" +
        "\t\r\x04\x0E\t\x0E\x04\x0F\t\x0F\x04\x10\t\x10\x04\x11\t\x11\x04\x12\t" +
        "\x12\x04\x13\t\x13\x04\x14\t\x14\x04\x15\t\x15\x04\x16\t\x16\x04\x17\t" +
        "\x17\x04\x18\t\x18\x04\x19\t\x19\x04\x1A\t\x1A\x04\x1B\t\x1B\x03\x02\x03" +
        "\x02\x03\x03\x03\x03\x03\x04\x03\x04\x03\x05\x03\x05\x03\x06\x03\x06\x03" +
        "\x07\x03\x07\x03\b\x03\b\x03\t\x03\t\x03\n\x03\n\x03\v\x03\v\x03\f\x03" +
        "\f\x03\r\x03\r\x03\r\x03\r\x03\r\x03\r\x07\rT\n\r\f\r\x0E\rW\v\r\x03\r" +
        "\x03\r\x03\r\x03\r\x03\x0E\x03\x0E\x03\x0E\x03\x0E\x07\x0Ea\n\x0E\f\x0E" +
        "\x0E\x0Ed\v\x0E\x03\x0E\x03\x0E\x03\x0E\x03\x0F\x03\x0F\x03\x0F\x03\x0F" +
        "\x03\x0F\x03\x0F\x03\x0F\x06\x0Fp\n\x0F\r\x0F\x0E\x0Fq\x03\x0F\x07\x0F" +
        "u\n\x0F\f\x0F\x0E\x0Fx\v\x0F\x03\x0F\x03\x0F\x03\x0F\x03\x10\x03\x10\x03" +
        "\x10\x03\x10\x03\x10\x03\x10\x03\x10\x03\x10\x03\x10\x03\x10\x03\x10\x07" +
        "\x10\x88\n\x10\f\x10\x0E\x10\x8B\v\x10\x03\x10\x03\x10\x03\x10\x03\x10" +
        "\x03\x11\x03\x11\x03\x11\x03\x11\x03\x11\x03\x11\x03\x11\x03\x11\x03\x11" +
        "\x03\x11\x03\x11\x06\x11\x9C\n\x11\r\x11\x0E\x11\x9D\x03\x11\x06\x11\xA1" +
        "\n\x11\r\x11\x0E\x11\xA2\x03\x11\x03\x11\x03\x12\x03\x12\x03\x12\x07\x12" +
        "\xAA\n\x12\f\x12\x0E\x12\xAD\v\x12\x03\x12\x03\x12\x03\x12\x03\x12\x03" +
        "\x12\x06\x12\xB4\n\x12\r\x12\x0E\x12\xB5\x03\x12\x03\x12\x03\x12\x03\x12" +
        "\x03\x12\x03\x12\x06\x12\xBE\n\x12\r\x12\x0E\x12\xBF\x03\x12\x05\x12\xC3" +
        "\n\x12\x03\x13\x03\x13\x03\x13\x03\x13\x07\x13\xC9\n\x13\f\x13\x0E\x13" +
        "\xCC\v\x13\x03\x13\x03\x13\x03\x14\x03\x14\x03\x14\x03\x14\x07\x14\xD4" +
        "\n\x14\f\x14\x0E\x14\xD7\v\x14\x03\x14\x03\x14\x03\x15\x06\x15\xDC\n\x15" +
        "\r\x15\x0E\x15\xDD\x03\x15\x03\x15\x06\x15\xE2\n\x15\r\x15\x0E\x15\xE3" +
        "\x05\x15\xE6\n\x15\x03\x16\x03\x16\x03\x16\x07\x16\xEB\n\x16\f\x16\x0E" +
        "\x16\xEE\v\x16\x03\x17\x03\x17\x07\x17\xF2\n\x17\f\x17\x0E\x17\xF5\v\x17" +
        "\x03\x18\x03\x18\x07\x18\xF9\n\x18\f\x18\x0E\x18\xFC\v\x18\x03\x18\x03" +
        "\x18\x03\x19\x06\x19\u0101\n\x19\r\x19\x0E\x19\u0102\x03\x1A\x06\x1A\u0106" +
        "\n\x1A\r\x1A\x0E\x1A\u0107\x03\x1B\x06\x1B\u010B\n\x1B\r\x1B\x0E\x1B\u010C" +
        "\x05Uv\x89\x02\x02\x1C\x03\x02\x03\x05\x02\x04\x07\x02\x05\t\x02\x06\v" +
        "\x02\x07\r\x02\b\x0F\x02\t\x11\x02\n\x13\x02\v\x15\x02\f\x17\x02\r\x19" +
        "\x02\x0E\x1B\x02\x0F\x1D\x02\x10\x1F\x02\x11!\x02\x12#\x02\x13%\x02\x14" +
        "\'\x02\x15)\x02\x16+\x02\x17-\x02\x18/\x02\x191\x02\x1A3\x02\x1B5\x02" +
        "\x1C\x03\x02\x12\x03\x02AA\x05\x02\v\f\x0F\x0F\"\"\x03\x02@@\x04\x02C" +
        "\\c|\x05\x022;C\\c|\x03\x022;\x05\x022;CHch\x05\x02\f\f\x0F\x0F$$\x05" +
        "\x02\f\f\x0F\x0F))\x06\x02<<C\\aac|\x07\x02/02<C\\aac|\x05\x02C\\aac|" +
        "\x06\x022;C\\aac|\f\x02\v\f\x0F\x0F\"\"((*+>@]]__}}\x7F\x7F\x04\x02\f" +
        "\f\x0F\x0F\x04\x02\v\v\"\"\x02\u0126\x02\x03\x03\x02\x02\x02\x02\x05\x03" +
        "\x02\x02\x02\x02\x07\x03\x02\x02\x02\x02\t\x03\x02\x02\x02\x02\v\x03\x02" +
        "\x02\x02\x02\r\x03\x02\x02\x02\x02\x0F\x03\x02\x02\x02\x02\x11\x03\x02" +
        "\x02\x02\x02\x13\x03\x02\x02\x02\x02\x15\x03\x02\x02\x02\x02\x17\x03\x02" +
        "\x02\x02\x02\x19\x03\x02\x02\x02\x02\x1B\x03\x02\x02\x02\x02\x1D\x03\x02" +
        "\x02\x02\x02\x1F\x03\x02\x02\x02\x02!\x03\x02\x02\x02\x02#\x03\x02\x02" +
        "\x02\x02%\x03\x02\x02\x02\x02\'\x03\x02\x02\x02\x02)\x03\x02\x02\x02\x02" +
        "+\x03\x02\x02\x02\x02-\x03\x02\x02\x02\x02/\x03\x02\x02\x02\x021\x03\x02" +
        "\x02\x02\x023\x03\x02\x02\x02\x025\x03\x02\x02\x02\x037\x03\x02\x02\x02" +
        "\x059\x03\x02\x02\x02\x07;\x03\x02\x02\x02\t=\x03\x02\x02\x02\v?\x03\x02" +
        "\x02\x02\rA\x03\x02\x02\x02\x0FC\x03\x02\x02\x02\x11E\x03\x02\x02\x02" +
        "\x13G\x03\x02\x02\x02\x15I\x03\x02\x02\x02\x17K\x03\x02\x02\x02\x19M\x03" +
        "\x02\x02\x02\x1B\\\x03\x02\x02\x02\x1Dh\x03\x02\x02\x02\x1F|\x03\x02\x02" +
        "\x02!\x90\x03\x02\x02\x02#\xC2\x03\x02\x02\x02%\xC4\x03\x02\x02\x02\'" +
        "\xCF\x03\x02\x02\x02)\xDB\x03\x02\x02\x02+\xE7\x03\x02\x02\x02-\xEF\x03" +
        "\x02\x02\x02/\xF6\x03\x02\x02\x021\u0100\x03\x02\x02\x023\u0105\x03\x02" +
        "\x02\x025\u010A\x03\x02\x02\x0278\x07*\x02\x028\x04\x03\x02\x02\x029:" +
        "\x07+\x02\x02:\x06\x03\x02\x02\x02;<\x07}\x02\x02<\b\x03\x02\x02\x02=" +
        ">\x07\x7F\x02\x02>\n\x03\x02\x02\x02?@\x07]\x02\x02@\f\x03\x02\x02\x02" +
        "AB\x07_\x02\x02B\x0E\x03\x02\x02\x02CD\x07>\x02\x02D\x10\x03\x02\x02\x02" +
        "EF\x07@\x02\x02F\x12\x03\x02\x02\x02GH\x071\x02\x02H\x14\x03\x02\x02\x02" +
        "IJ\x07?\x02\x02J\x16\x03\x02\x02\x02KL\x07A\x02\x02L\x18\x03\x02\x02\x02" +
        "MN\x07>\x02\x02NO\x07#\x02\x02OP\x07/\x02\x02PQ\x07/\x02\x02QU\x03\x02" +
        "\x02\x02RT\v\x02\x02\x02SR\x03\x02\x02\x02TW\x03\x02\x02\x02UV\x03\x02" +
        "\x02\x02US\x03\x02\x02\x02VX\x03\x02\x02\x02WU\x03\x02\x02\x02XY\x07/" +
        "\x02\x02YZ\x07/\x02\x02Z[\x07@\x02\x02[\x1A\x03\x02\x02\x02\\]\x07>\x02" +
        "\x02]^\x07A\x02\x02^b\x03\x02\x02\x02_a\n\x02\x02\x02`_\x03\x02\x02\x02" +
        "ad\x03\x02\x02\x02b`\x03\x02\x02\x02bc\x03\x02\x02\x02ce\x03\x02\x02\x02" +
        "db\x03\x02\x02\x02ef\x07A\x02\x02fg\x07@\x02\x02g\x1C\x03\x02\x02\x02" +
        "hi\x07>\x02\x02ij\x07A\x02\x02jk\x07z\x02\x02kl\x07o\x02\x02lm\x07n\x02" +
        "\x02mo\x03\x02\x02\x02np\t\x03\x02\x02on\x03\x02\x02\x02pq\x03\x02\x02" +
        "\x02qo\x03\x02\x02\x02qr\x03\x02\x02\x02rv\x03\x02\x02\x02su\v\x02\x02" +
        "\x02ts\x03\x02\x02\x02ux\x03\x02\x02\x02vw\x03\x02\x02\x02vt\x03\x02\x02" +
        "\x02wy\x03\x02\x02\x02xv\x03\x02\x02\x02yz\x07A\x02\x02z{\x07@\x02\x02" +
        "{\x1E\x03\x02\x02\x02|}\x07>\x02\x02}~\x07#\x02\x02~\x7F\x07]\x02\x02" +
        "\x7F\x80\x07E\x02\x02\x80\x81\x07F\x02\x02\x81\x82\x07C\x02\x02\x82\x83" +
        "\x07V\x02\x02\x83\x84\x07C\x02\x02\x84\x85\x07]\x02\x02\x85\x89\x03\x02" +
        "\x02\x02\x86\x88\v\x02\x02\x02\x87\x86\x03\x02\x02\x02\x88\x8B\x03\x02" +
        "\x02\x02\x89\x8A\x03\x02\x02\x02\x89\x87\x03\x02\x02\x02\x8A\x8C\x03\x02" +
        "\x02\x02\x8B\x89\x03\x02\x02\x02\x8C\x8D\x07_\x02\x02\x8D\x8E\x07_\x02" +
        "\x02\x8E\x8F\x07@\x02\x02\x8F \x03\x02\x02\x02\x90\x91\x07>\x02\x02\x91" +
        "\x92\x07#\x02\x02\x92\x93\x07F\x02\x02\x93\x94\x07Q\x02\x02\x94\x95\x07" +
        "E\x02\x02\x95\x96\x07V\x02\x02\x96\x97\x07[\x02\x02\x97\x98\x07R\x02\x02" +
        "\x98\x99\x07G\x02\x02\x99\x9B\x03\x02\x02\x02\x9A\x9C\t\x03\x02\x02\x9B" +
        "\x9A\x03\x02\x02\x02\x9C\x9D\x03\x02\x02\x02\x9D\x9B\x03\x02\x02\x02\x9D" +
        "\x9E\x03\x02\x02\x02\x9E\xA0\x03\x02\x02\x02\x9F\xA1\n\x04\x02\x02\xA0" +
        "\x9F\x03\x02\x02\x02\xA1\xA2\x03\x02\x02\x02\xA2\xA0\x03\x02\x02\x02\xA2" +
        "\xA3\x03\x02\x02\x02\xA3\xA4\x03\x02\x02\x02\xA4\xA5\x07@\x02\x02\xA5" +
        "\"\x03\x02\x02\x02\xA6\xA7\x07(\x02\x02\xA7\xAB\t\x05\x02\x02\xA8\xAA" +
        "\t\x06\x02\x02\xA9\xA8\x03\x02\x02\x02\xAA\xAD\x03\x02\x02\x02\xAB\xA9" +
        "\x03\x02\x02\x02\xAB\xAC\x03\x02\x02\x02\xAC\xAE\x03\x02\x02\x02\xAD\xAB" +
        "\x03\x02\x02\x02\xAE\xC3\x07=\x02\x02\xAF\xB0\x07(\x02\x02\xB0\xB1\x07" +
        "%\x02\x02\xB1\xB3\x03\x02\x02\x02\xB2\xB4\t\x07\x02\x02\xB3\xB2\x03\x02" +
        "\x02\x02\xB4\xB5\x03\x02\x02\x02\xB5\xB3\x03\x02\x02\x02\xB5\xB6\x03\x02" +
        "\x02\x02\xB6\xB7\x03\x02\x02\x02\xB7\xC3\x07=\x02\x02\xB8\xB9\x07(\x02" +
        "\x02\xB9\xBA\x07%\x02\x02\xBA\xBB\x07z\x02\x02\xBB\xBD\x03\x02\x02\x02" +
        "\xBC\xBE\t\b\x02\x02\xBD\xBC\x03\x02\x02\x02\xBE\xBF\x03\x02\x02\x02\xBF" +
        "\xBD\x03\x02\x02\x02\xBF\xC0\x03\x02\x02\x02\xC0\xC1\x03\x02\x02\x02\xC1" +
        "\xC3\x07=\x02\x02\xC2\xA6\x03\x02\x02\x02\xC2\xAF\x03\x02\x02\x02\xC2" +
        "\xB8\x03\x02\x02\x02\xC3$\x03\x02\x02\x02\xC4\xCA\x07$\x02\x02\xC5\xC9" +
        "\n\t\x02\x02\xC6\xC7\x07^\x02\x02\xC7\xC9\x07$\x02\x02\xC8\xC5\x03\x02" +
        "\x02\x02\xC8\xC6\x03\x02\x02\x02\xC9\xCC\x03\x02\x02\x02\xCA\xC8\x03\x02" +
        "\x02\x02\xCA\xCB\x03\x02\x02\x02\xCB\xCD\x03\x02\x02\x02\xCC\xCA\x03\x02" +
        "\x02\x02\xCD\xCE\x07$\x02\x02\xCE&\x03\x02\x02\x02\xCF\xD5\x07)\x02\x02" +
        "\xD0\xD4\n\n\x02\x02\xD1\xD2\x07^\x02\x02\xD2\xD4\x07)\x02\x02\xD3\xD0" +
        "\x03\x02\x02\x02\xD3\xD1\x03\x02\x02\x02\xD4\xD7\x03\x02\x02\x02\xD5\xD3" +
        "\x03\x02\x02\x02\xD5\xD6\x03\x02\x02\x02\xD6\xD8\x03\x02\x02\x02\xD7\xD5" +
        "\x03\x02\x02\x02\xD8\xD9\x07)\x02\x02\xD9(\x03\x02\x02\x02\xDA\xDC\t\x07" +
        "\x02\x02\xDB\xDA\x03\x02\x02\x02\xDC\xDD\x03\x02\x02\x02\xDD\xDB\x03\x02" +
        "\x02\x02\xDD\xDE\x03\x02\x02\x02\xDE\xE5\x03\x02\x02\x02\xDF\xE1\x070" +
        "\x02\x02\xE0\xE2\t\x07\x02\x02\xE1\xE0\x03\x02\x02\x02\xE2\xE3\x03\x02" +
        "\x02\x02\xE3\xE1\x03\x02\x02\x02\xE3\xE4\x03\x02\x02\x02\xE4\xE6\x03\x02" +
        "\x02\x02\xE5\xDF\x03\x02\x02\x02\xE5\xE6\x03\x02\x02\x02\xE6*\x03\x02" +
        "\x02\x02\xE7\xE8\x071\x02\x02\xE8\xEC\t\v\x02\x02\xE9\xEB\t\f\x02\x02" +
        "\xEA\xE9\x03\x02\x02\x02\xEB\xEE\x03\x02\x02\x02\xEC\xEA\x03\x02\x02\x02" +
        "\xEC\xED\x03\x02\x02\x02\xED,\x03\x02\x02\x02\xEE\xEC\x03\x02\x02\x02" +
        "\xEF\xF3\t\v\x02\x02\xF0\xF2\t\f\x02\x02\xF1\xF0\x03\x02\x02\x02\xF2\xF5" +
        "\x03\x02\x02\x02\xF3\xF1\x03\x02\x02\x02\xF3\xF4\x03\x02\x02\x02\xF4." +
        "\x03\x02\x02\x02\xF5\xF3\x03\x02\x02\x02\xF6\xFA\t\r\x02\x02\xF7\xF9\t" +
        "\x0E\x02\x02\xF8\xF7\x03\x02\x02\x02\xF9\xFC\x03\x02\x02\x02\xFA\xF8\x03" +
        "\x02\x02\x02\xFA\xFB\x03\x02\x02\x02\xFB\xFD\x03\x02\x02\x02\xFC\xFA\x03" +
        "\x02\x02\x02\xFD\xFE\x07<\x02\x02\xFE0\x03\x02\x02\x02\xFF\u0101\n\x0F" +
        "\x02\x02\u0100\xFF\x03\x02\x02\x02\u0101\u0102\x03\x02\x02\x02\u0102\u0100" +
        "\x03\x02\x02\x02\u0102\u0103\x03\x02\x02\x02\u01032\x03\x02\x02\x02\u0104" +
        "\u0106\t\x10\x02\x02\u0105\u0104\x03\x02\x02\x02\u0106\u0107\x03\x02\x02" +
        "\x02\u0107\u0105\x03\x02\x02\x02\u0107\u0108\x03\x02\x02\x02\u01084\x03" +
        "\x02\x02\x02\u0109\u010B\t\x11\x02\x02\u010A\u0109\x03\x02\x02\x02\u010B" +
        "\u010C\x03\x02\x02\x02\u010C\u010A\x03\x02\x02\x02\u010C\u010D\x03\x02" +
        "\x02\x02\u010D6\x03\x02\x02\x02\x1B\x02Ubqv\x89\x9D\xA2\xAB\xB5\xBF\xC2" +
        "\xC8\xCA\xD3\xD5\xDD\xE3\xE5\xEC\xF3\xFA\u0102\u0107\u010C\x02";
    static __ATN;
    static get _ATN() {
        if (!XmlMini.__ATN) {
            XmlMini.__ATN = new ATNDeserializer_1.ATNDeserializer().deserialize(Utils.toCharArray(XmlMini._serializedATN));
        }
        return XmlMini.__ATN;
    }
}
exports.XmlMini = XmlMini;
